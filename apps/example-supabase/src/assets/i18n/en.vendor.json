{
  "afat": {
    "field \"{{label}}\"": "field \"{{label}}\""
  },
  "authorizer": {},
  "sso": {
    "Forbidden": "Forbidden",
    "Sso error": "Sso error",
    "Unauthorized": "Unauthorized"
  },
  "supabase": {
    "Forbidden": "Forbidden",
    "Supabase error": "Supabase error",
    "Unauthorized": "Unauthorized"
  },
  "cache-manager": {},
  "docker-compose": {},
  "flyway": {},
  "graphql": {},
  "keyv": {},
  "minio": {},
  "pg-flyway": {},
  "pino": {},
  "pm2": {},
  "terminus": {},
  "prisma": {},
  "runtime-tools": {},
  "data-prefetch": {},
  "bridge-react-webpack-plugin": {},
  "swagger": {},
  "sso-getText": {
    "Forbidden": "Forbidden",
    "Sso error": "Sso error",
    "Unauthorized": "Unauthorized"
  },
  "supabase-getText": {
    "Forbidden": "Forbidden",
    "Supabase error": "Supabase error",
    "Unauthorized": "Unauthorized"
  },
  "prisma-tools-getText": {
    "Common db error": "Common db error",
    "Database query error": "Database query error",
    "Invalid identifier": "Invalid identifier",
    "Invalid linked table identifier": "Invalid linked table identifier",
    "Not found error": "Not found error",
    "Unhandled error": "Unhandled error",
    "Unique error": "Unique error"
  },
  "prisma-tools": {
    "Common db error": "Common db error",
    "Database query error": "Database query error",
    "Invalid identifier": "Invalid identifier",
    "Invalid linked table identifier": "Invalid linked table identifier",
    "Not found error": "Not found error",
    "Unhandled error": "Unhandled error",
    "Unique error": "Unique error"
  },
  "files-getText": {
    "Files error": "Files error",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Only those who uploaded files can delete them": "Only those who uploaded files can delete them",
    "Uploading files with extension \"{{ext}}\" is not supported": "Uploading files with extension \"{{ext}}\" is not supported",
    "Event that fires after a file is deleted": "Event that fires after a file is deleted"
  },
  "files-afat": {
    "files.image-file.change-file": "Change",
    "files.image-file.select-file": "Select"
  },
  "notifications-getText": {
    "Forbidden": "Forbidden",
    "Notifications error": "Notifications error",
    "Tenant ID not set": "Tenant ID not set",
    "The letter was not sent because the transport parameters or the letter parameters were empty": "The letter was not sent because the transport parameters or the letter parameters were empty",
    "User ID not set": "User ID not set",
    "Event that fires after a notification is created": "Event that fires after a notification is created",
    "Event that fires after a notification is sent": "Event that fires after a notification is sent",
    "Event that fires after a notification is updated": "Event that fires after a notification is updated",
    "Event that occurs when there is an error sending a notification": "Event that occurs when there is an error sending a notification"
  },
  "two-factor-getText": {
    "Number of attempts of two factor code has been exhausted": "Number of attempts of two factor code has been exhausted",
    "recursive method recursiveGenTwoFactorCode has been run more than 10 times": "recursive method recursiveGenTwoFactorCode has been run more than 10 times",
    "Two factor code not set": "Two factor code not set",
    "Two factor error": "Two factor error",
    "Wrong two factor code": "Wrong two factor code",
    "Two factor code is outdated": "Two factor code is outdated",
    "Please wait 30 seconds": "Please wait 30 seconds",
    "Two-factor code has already been used": "Two-factor code has already been used",
    "Please wait {{{timeout}}} seconds": "Please wait {{{timeout}}} seconds"
  },
  "webhook-getText": {
    "Event not found": "Event not found",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Tenant ID not set": "Tenant ID not set",
    "User ID not set": "User ID not set",
    "User not found": "User not found",
    "Webhook error": "Webhook error"
  },
  "webhook-afat": {
    "Logs for webhook #{{webhookId}}": "Logs for webhook #{{webhookId}}",
    "input search text": "input search text",
    "Action": "Action",
    "View": "View",
    "Delete": "Delete",
    "select tenant": "select tenant",
    "Loading...": "Loading...",
    "Create new": "Create new",
    "Edit": "Edit",
    "Save": "Save",
    "Create": "Create",
    "webhook-log.form.fields.request": "Request",
    "webhook-log.form.fields.webhook-status": "Webhook status",
    "webhook-log.form.fields.response": "Response",
    "webhook-log.form.fields.response-status": "Response status",
    "webhook.form.fields.endpoint": "Endpoint",
    "webhook.form.fields.event-name": "Event name",
    "webhook.form.fields.headers": "Headers",
    "webhook.form.fields.enabled": "Enabled",
    "webhook.form.fields.request-timeout": "Request timeout",
    "webhook.form.fields.work-until-date": "Work until date",
    "Example of payload": "Example of payload",
    "webhook-log.view-modal.title": "Webhook log #{{ id }}",
    "Close": "Close",
    "webhook-log.delete-modal.title": "Delete webhook log #{{ id }}",
    "Yes": "Yes",
    "No": "No",
    "webhook-log.grid.columns.id": "Id",
    "webhook-log.grid.columns.request": "Request",
    "webhook-log.grid.columns.response": "Response",
    "webhook-log.grid.columns.response-status": "Response status",
    "webhook-log.grid.columns.webhook-status": "Webhook status",
    "webhook.test-request-modal.success-title": "The test request was successful",
    "webhook.test-request-modal.error-title": "The test request failed with an error",
    "webhook.update-modal.title": "Update webhook #{{ id }}",
    "webhook.create-modal.title": "Create new webhook",
    "Test request": "Test request",
    "Cancel": "Cancel",
    "webhook.delete-modal.title": "Delete webhook #{{ id }}",
    "webhook.grid.columns.id": "Id",
    "webhook.grid.columns.enabled": "Enabled",
    "webhook.grid.columns.endpoint": "Endpoint",
    "webhook.grid.columns.event-name": "Event name",
    "webhook.grid.columns.headers": "Headers",
    "webhook.grid.columns.request-timeout": "Request timeout",
    "webhook.grid.columns.work-until-date": "Work until date",
    "id not set": "id not set",
    "Success": "Success",
    "Fill user credentials": "Fill user credentials",
    "Fill admin credentials": "Fill admin credentials",
    "Sign-in": "Sign-in",
    "Validation errors": "Validation errors"
  },
  "validation-getText": {
    "Validation error": "Validation error"
  },
  "files": {
    "Files error": "Files error",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Only those who uploaded files can delete them": "Only those who uploaded files can delete them",
    "Uploading files with extension \"{{ext}}\" is not supported": "Uploading files with extension \"{{ext}}\" is not supported",
    "Event that fires after a file is deleted": "Event that fires after a file is deleted"
  },
  "notifications": {
    "Forbidden": "Forbidden",
    "Notifications error": "Notifications error",
    "Tenant ID not set": "Tenant ID not set",
    "The letter was not sent because the transport parameters or the letter parameters were empty": "The letter was not sent because the transport parameters or the letter parameters were empty",
    "User ID not set": "User ID not set",
    "Event that fires after a notification is created": "Event that fires after a notification is created",
    "Event that fires after a notification is sent": "Event that fires after a notification is sent",
    "Event that fires after a notification is updated": "Event that fires after a notification is updated",
    "Event that occurs when there is an error sending a notification": "Event that occurs when there is an error sending a notification"
  },
  "two-factor": {
    "Number of attempts of two factor code has been exhausted": "Number of attempts of two factor code has been exhausted",
    "recursive method recursiveGenTwoFactorCode has been run more than 10 times": "recursive method recursiveGenTwoFactorCode has been run more than 10 times",
    "Two factor code not set": "Two factor code not set",
    "Two factor error": "Two factor error",
    "Wrong two factor code": "Wrong two factor code",
    "Two factor code is outdated": "Two factor code is outdated",
    "Please wait 30 seconds": "Please wait 30 seconds",
    "Two-factor code has already been used": "Two-factor code has already been used",
    "Please wait {{{timeout}}} seconds": "Please wait {{{timeout}}} seconds"
  },
  "webhook": {
    "Event not found": "Event not found",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Tenant ID not set": "Tenant ID not set",
    "User ID not set": "User ID not set",
    "User not found": "User not found",
    "Webhook error": "Webhook error"
  },
  "validation": {
    "Validation error": "Validation error"
  }
}
