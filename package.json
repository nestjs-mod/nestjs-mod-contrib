{
  "name": "@nestjs-mod/contrib",
  "description": "A collection of modules unified for NestJS-mod",
  "version": "0.0.0",
  "license": "MIT",
  "author": "EndyKaufman <admin@site15.ru>",
  "engines": {
    "node": ">=14",
    "npm": ">=6"
  },
  "publishConfig": {
    "access": "public"
  },
  "bugs": {
    "url": "https://github.com/nestjs-mod/nestjs-mod-contrib/issues"
  },
  "homepage": "https://github.com/nestjs-mod/nestjs-mod-contrib",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nestjs-mod/nestjs-mod-contrib.git"
  },
  "maintainers": [
    {
      "name": "EndyKaufman",
      "email": "admin@site15.ru"
    }
  ],
  "scripts": {
    "_____dev infra_____": "_____dev infra_____",
    "serve:dev:cli": "export NODE_ENV=infrastructure && npm run nx -- serve cli",
    "serve:dev:example-pino-logger": "npm run nx -- serve example-pino-logger --host=0.0.0.0",
    "serve:dev:example-terminus": "npm run nx -- serve example-terminus --host=0.0.0.0",
    "serve:dev:example-prisma": "npm run nx -- serve example-prisma --host=0.0.0.0",
    "serve:dev": "npm run nx:many -- -t=serve",
    "serve:dev:example-prisma-flyway": "npm run nx -- serve example-prisma-flyway --host=0.0.0.0",
    "serve:dev:example-cache-manager": "npm run nx -- serve example-cache-manager --host=0.0.0.0",
    "serve:dev:example-graphql": "npm run nx -- serve example-graphql --host=0.0.0.0",
    "serve:dev:example-graphql:fastify": "export PLATFORM=fastify && npm run nx -- serve example-graphql --host=0.0.0.0",
    "serve:dev:example-minio": "npm run nx -- serve example-minio --host=0.0.0.0",
    "_____angular dev infra_____": "_____angular dev infra_____",
    "serve:dev:example-minio-angular": "npm run nx -- serve example-minio-angular --disable-host-check",
    "serve:dev:example-minio-angular-ssr": "npm run nx -- serve-ssr example-minio-angular",
    "_____pm2 prod infra_____": "_____pm2 prod infra_____",
    "pm2:start": "./node_modules/.bin/pm2 start ./ecosystem.config.json",
    "pm2:stop": "./node_modules/.bin/pm2 delete all",
    "_____prod infra_____": "_____prod infra_____",
    "start": "npm run nx:many -- -t=start",
    "build": "npm run generate && npm run tsc:lint && npm run nx:many -- -t=build --skip-nx-cache=true",
    "start:prod:cli": "npm run nx -- start cli --host=0.0.0.0",
    "start:prod:example-pino-logger": "npm run nx -- start example-pino-logger",
    "start:prod:example-terminus": "npm run nx -- start example-terminus",
    "start:prod:example-prisma": "npm run nx -- start example-prisma",
    "build:prod:example-prisma": "npm run nx -- build example-prisma",
    "start:prod:example-prisma-flyway": "npm run nx -- start example-prisma-flyway",
    "start:prod:example-cache-manager": "npm run nx -- start example-cache-manager",
    "start:prod:example-graphql": "npm run nx -- start example-graphql",
    "start:prod:example-minio": "npm run nx -- start example-minio",
    "build:prod:example-minio": "npm run nx -- build example-minio",
    "_____docs_____": "_____docs_____",
    "docs:infrastructure": "export NODE_ENV=infrastructure && npm run nx:many -- -t=start --parallel=1",
    "docs:infrastructure:example-minio": "export NODE_ENV=infrastructure && npm run nx -- start example-minio --host=0.0.0.0",
    "docs:infrastructure:example-prisma": "export NODE_ENV=infrastructure && npm run nx -- start example-prisma --host=0.0.0.0",
    "docs:infrastructure:example-terminus": "export NODE_ENV=infrastructure && npm run nx -- start example-terminus --host=0.0.0.0",
    "_____docker-compose infra_____": "_____docker-compose infra_____",
    "docker-compose:start:prisma": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-prisma/docker-compose.yml --compatibility up -d",
    "docker-compose:stop:prisma": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-prisma/docker-compose.yml down",
    "docker-compose:start": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./docker-compose.yml --compatibility up -d",
    "docker-compose:stop": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./docker-compose.yml down",
    "docker-compose:start:example-prisma-flyway": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-prisma-flyway/docker-compose.yml --compatibility up -d",
    "docker-compose:stop:example-prisma-flyway": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-prisma-flyway/docker-compose.yml down",
    "docker-compose:start:example-cache-manager": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-cache-manager/docker-compose.yml --compatibility up -d",
    "docker-compose:stop:example-cache-manager": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-cache-manager/docker-compose.yml down",
    "docker-compose:start:example-minio": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-minio/docker-compose.yml --compatibility up -d",
    "docker-compose:stop:example-minio": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/example-minio/docker-compose.yml down",
    "_____tests_____": "_____tests_____",
    "test": "npm run nx:many -- -t=test --passWithNoTests --skip-nx-cache=true --output-style=stream-without-prefixes",
    "test:example-pino-logger": "npm run nx -- test example-pino-logger --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "test:example-terminus": "npm run nx -- test example-terminus --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "test:example-prisma": "npm run nx -- test example-prisma --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "test:example-prisma-flyway": "npm run nx -- test example-prisma-flyway --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "test:example-cache-manager": "npm run nx -- test example-cache-manager --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "test:example-graphql": "npm run nx -- test example-graphql --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "test:example-minio": "npm run nx -- test example-minio --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "_____lint_____": "_____lint_____",
    "lint": "npm run tsc:lint && npm run nx:many -- -t=lint",
    "lint:fix": "npm run tsc:lint && npm run nx:many -- -t=lint --fix",
    "tsc:lint": "tsc --noEmit -p tsconfig.base.json",
    "_____db_____": "_____db_____",
    "db:create": "npm run nx:many -- -t=db-create",
    "_____prisma_____": "_____prisma_____",
    "prisma:migrate-dev-new:example-prisma": "npm run nx -- run example-prisma:prisma-migrate-dev --create-only --name=new",
    "prisma:migrate-dev:example-prisma": "npm run nx -- run example-prisma:prisma-migrate-dev --create-only",
    "prisma:migrate-deploy:example-prisma": "npm run nx -- run example-prisma:prisma-migrate-deploy",
    "prisma:migrate-deploy": "npm run nx:many -- -t=prisma-migrate-deploy",
    "prisma:pull": "npm run nx:many -- -t=prisma-pull",
    "prisma:generate": "npm run nx:many -- -t=prisma-generate",
    "prisma:pull:example-prisma": "npm run nx -- run example-prisma:prisma-pull",
    "prisma:pull:example-prisma-flyway": "npm run nx -- run example-prisma-flyway:prisma-pull",
    "prisma:migrate-dev-new:example-prisma-flyway": "npm run nx -- run example-prisma-flyway:prisma-migrate-dev --create-only --name=new",
    "prisma:migrate-dev:example-prisma-flyway": "npm run nx -- run example-prisma-flyway:prisma-migrate-dev --create-only",
    "prisma:migrate-deploy:example-prisma-flyway": "npm run nx -- run example-prisma-flyway:prisma-migrate-deploy",
    "_____flyway_____": "_____flyway_____",
    "flyway:create:example-prisma-flyway": "npm run nx -- run example-prisma-flyway:flyway-create-migration",
    "flyway:migrate:example-prisma-flyway": "npm run nx -- run example-prisma-flyway:flyway-migrate",
    "flyway:migrate": "npm run nx:many -- -t=flyway-migrate",
    "_____utils_____": "_____utils_____",
    "generate": "npm run nx:many -- -t=generate --skip-nx-cache=true && npm run make-ts-list && npm run lint:fix",
    "nx": "nx",
    "rucken": "rucken",
    "dep-graph": "npm run nx -- dep-graph",
    "nx:many": "npm run nx -- run-many --exclude=@nestjs-mod/contrib",
    "make-ts-list": "./node_modules/.bin/rucken make-ts-list",
    "manual:prepare": "export NX_SKIP_NX_CACHE=true && npm run generate && npm run build && npm run docs:infrastructure && npm run test",
    "update:nestjs-mod-versions": "npx -y npm-check-updates @nestjs-mod/* nestjs-mod -u && npm i",
    "tsc": "tsc"
  },
  "private": true,
  "devDependencies": {
    "@angular-devkit/build-angular": "~17.1.0",
    "@angular-devkit/core": "~17.1.0",
    "@angular-devkit/schematics": "~17.1.0",
    "@angular-eslint/eslint-plugin": "~17.0.0",
    "@angular-eslint/eslint-plugin-template": "~17.0.0",
    "@angular-eslint/template-parser": "~17.0.0",
    "@angular/cli": "~17.1.0",
    "@angular/compiler-cli": "~17.1.0",
    "@angular/language-service": "~17.1.0",
    "@commitlint/cli": "^17.0.0",
    "@commitlint/config-conventional": "^17.0.0",
    "@nestjs-mod/schematics": "2.5.2",
    "@nestjs/schematics": "^10.0.1",
    "@nestjs/testing": "^10.0.2",
    "@nx/eslint": "17.2.8",
    "@nx/eslint-plugin": "17.2.8",
    "@nx/jest": "18.0.4",
    "@nx/js": "18.0.4",
    "@nx/nest": "^17.2.8",
    "@nx/node": "17.2.8",
    "@nx/webpack": "17.2.8",
    "@nx/workspace": "17.2.8",
    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.7",
    "@schematics/angular": "~17.1.0",
    "@svgr/webpack": "^8.0.1",
    "@swc-node/register": "~1.8.0",
    "@swc/core": "~1.3.85",
    "@swc/helpers": "~0.5.2",
    "@theunderscorer/nx-semantic-release": "^2.10.0",
    "@types/express": "4.17.14",
    "@types/graphql-fields": "^1.3.9",
    "@types/jest": "^29.4.0",
    "@types/markdown-it": "^13.0.7",
    "@types/node": "18.16.9",
    "@types/supertest": "^6.0.2",
    "@typescript-eslint/eslint-plugin": "^6.9.1",
    "@typescript-eslint/parser": "^6.9.1",
    "browser-sync": "^3.0.0",
    "class-validator-multi-lang": "^0.130.201",
    "eslint": "~8.48.0",
    "eslint-config-prettier": "^9.0.0",
    "fast-glob": "^3.3.2",
    "husky": "^8.0.3",
    "jest": "^29.4.1",
    "jest-environment-jsdom": "^29.4.1",
    "jest-environment-node": "^29.4.1",
    "jest-preset-angular": "~13.1.4",
    "jsonc-eslint-parser": "^2.1.0",
    "lint-staged": "^15.2.0",
    "node-flywaydb": "^3.0.7",
    "nx": "17.2.8",
    "prettier": "^2.6.2",
    "prisma": "^5.9.1",
    "react-refresh": "^0.10.0",
    "rucken": "^4.6.4",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0",
    "ts-node": "10.9.1",
    "typescript": "~5.2.2",
    "url-loader": "^4.1.1",
    "verdaccio": "^5.0.4"
  },
  "dependencies": {
    "@angular/animations": "~17.1.0",
    "@angular/common": "~17.1.0",
    "@angular/compiler": "~17.1.0",
    "@angular/core": "~17.1.0",
    "@angular/forms": "~17.1.0",
    "@angular/platform-browser": "~17.1.0",
    "@angular/platform-browser-dynamic": "~17.1.0",
    "@angular/platform-server": "~17.1.0",
    "@angular/router": "~17.1.0",
    "@angular/ssr": "~17.1.0",
    "@apollo/server": "^4.3.2",
    "@as-integrations/fastify": "^2.1.1",
    "@graphql-tools/utils": "^10.0.13",
    "@nestjs-mod/common": "2.9.1",
    "@nestjs-mod/fastify": "1.1.1",
    "@nestjs-mod/reports": "2.9.1",
    "@nestjs-mod/testing": "2.9.1",
    "@nestjs/apollo": "^12.0.11",
    "@nestjs/common": "^10.0.2",
    "@nestjs/core": "^10.0.2",
    "@nestjs/graphql": "^12.0.11",
    "@nestjs/platform-express": "^10.0.2",
    "@nestjs/platform-fastify": "^10.3.2",
    "@nestjs/terminus": "^10.2.0",
    "@nx/angular": "18.0.4",
    "@prisma/client": "^5.9.1",
    "axios": "^1.0.0",
    "cache-manager": "^5.2.3",
    "cache-manager-redis-yet": "^4.1.2",
    "case-anything": "^2.1.13",
    "class-validator": "^0.14.0",
    "compose-spec-schema": "^1.0.0",
    "connection-string": "^4.3.5",
    "dataloader": "^2.2.2",
    "dotenv": ">=16.3.1",
    "express": "~4.18.2",
    "graphql": "^16.8.1",
    "graphql-fields": "^2.0.3",
    "graphql-subscriptions": "2.0.0",
    "graphql-type-json": "^0.3.2",
    "markdown-it": "^14.0.0",
    "nestjs-minio": "^2.5.4",
    "nestjs-pino": "^4.0.0",
    "pino-http": "^9.0.0",
    "pino-pretty": "^10.3.1",
    "pm2": "^5.3.0",
    "redis": "^4.6.7",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.0",
    "tslib": "^2.3.0",
    "yaml": "^2.3.4",
    "zone.js": "~0.14.3"
  },
  "nx": {
    "includedScripts": []
  },
  "lint-staged": {
    "*.{js,ts}": "eslint --fix"
  },
  "scriptsComments": {
    "serve:dev:cli": [
      "Running cli application source code in watch mode"
    ],
    "serve:dev:example-pino-logger": [
      "Running example-pino-logger application source code in watch mode"
    ],
    "serve:dev:example-terminus": [
      "Running example-terminus application source code in watch mode"
    ],
    "serve:dev:example-prisma": [
      "Running example-prisma application source code in watch mode"
    ],
    "serve:dev": [
      "Running NestJS application source code in watch mode"
    ],
    "serve:dev:example-prisma-flyway": [
      "Running example-prisma-flyway source code in watch mode"
    ],
    "serve:dev:example-cache-manager": [
      "Running example-cache-manager source code in watch mode"
    ],
    "serve:dev:example-graphql": [
      "Running example-graphql source code in watch mode"
    ],
    "serve:dev:example-graphql:fastify": [],
    "serve:dev:example-minio": [
      "Running example-minio source code in watch mode"
    ],
    "serve:dev:example-minio-angular": [
      "Running frontend application for example-minio in watch mode"
    ],
    "serve:dev:example-minio-angular-ssr": [
      "Running frontend application in SSR mode for example-minio in watch mode"
    ],
    "pm2:start": [
      "Launch all applications in PM2 mode"
    ],
    "pm2:stop": [
      "Stop all applications in PM2 mode"
    ],
    "start": [
      "Launching a built NestJS application (you must first build it using the build command)"
    ],
    "build": [
      "Building a NestJS application"
    ],
    "start:prod:cli": [
      "Launching cli application (you must first build it using the build command)"
    ],
    "start:prod:example-pino-logger": [
      "Launching a built example-pino-logger (you must first build it using the build command)"
    ],
    "start:prod:example-terminus": [
      "Launching a built example-terminus (you must first build it using the build command)"
    ],
    "start:prod:example-prisma": [
      "Launching example-prisma application (you must first build it using the build command)"
    ],
    "build:prod:example-prisma": [
      "Building example-prisma application"
    ],
    "start:prod:example-prisma-flyway": [
      "Launching a built example-prisma-flyway (you must first build it using the build command)"
    ],
    "start:prod:example-cache-manager": [
      "Launching a built example-cache-manager (you must first build it using the build command)"
    ],
    "start:prod:example-graphql": [
      "Launching a built example-graphql (you must first build it using the build command)"
    ],
    "start:prod:example-minio": [
      "Launching a built example-minio (you must first build it using the build command)"
    ],
    "build:prod:example-minio": [],
    "docs:infrastructure": [
      "Creation of documentation for the entire infrastructure and creation of files necessary to launch the infrastructure"
    ],
    "docs:infrastructure:example-minio": [],
    "docs:infrastructure:example-prisma": [
      "Creation of documentation for the entire infrastructure and creation of files necessary to launch the infrastructure for example-prisma"
    ],
    "docs:infrastructure:example-terminus": [
      "Creation of documentation for the entire infrastructure and creation of files necessary to launch the infrastructure for example-terminus"
    ],
    "docker-compose:start:prisma": [
      "Running the docker-compose infrastructure for prisma"
    ],
    "docker-compose:stop:prisma": [
      "Stopping the docker-compose infrastructure for prisma"
    ],
    "docker-compose:start": [
      "Running the main docker-compose infrastructure"
    ],
    "docker-compose:stop": [
      "Stopping the main docker-compose infrastructure"
    ],
    "docker-compose:start:example-prisma-flyway": [
      "Running the docker-compose infrastructure for example-prisma-flyway"
    ],
    "docker-compose:stop:example-prisma-flyway": [
      "Stopping the docker-compose infrastructure for example-prisma-flyway"
    ],
    "docker-compose:start:example-cache-manager": [
      "Running the docker-compose infrastructure for example-cache-manager"
    ],
    "docker-compose:stop:example-cache-manager": [
      "Stopping the docker-compose infrastructure for example-cache-manager"
    ],
    "docker-compose:start:example-minio": [
      "Running the docker-compose infrastructure for example-minio"
    ],
    "docker-compose:stop:example-minio": [
      "Stopping the docker-compose infrastructure for example-minio"
    ],
    "test": [
      "Running tests across the entire project"
    ],
    "test:example-pino-logger": [
      "Running tests for example-pino-logger"
    ],
    "test:example-terminus": [
      "Running tests for example-terminus"
    ],
    "test:example-prisma": [
      "Running tests for example-prisma"
    ],
    "test:example-prisma-flyway": [
      "Running tests for example-prisma-flyway"
    ],
    "test:example-cache-manager": [
      "Running tests for example-cache-manager"
    ],
    "test:example-graphql": [
      "Running tests for example-graphql"
    ],
    "test:example-minio": [
      "Running tests for example-minio"
    ],
    "lint": [
      "Checking the typescript code for the entire project"
    ],
    "lint:fix": [
      "Checking the typescript code throughout the project and trying to fix everything possible"
    ],
    "tsc:lint": [
      "Checking typescript code in libraries"
    ],
    "db:create": [
      "Creation all databases of applications and modules"
    ],
    "prisma:migrate-dev-new:example-prisma": [
      "Command to create new empty migration for example-prisma"
    ],
    "prisma:migrate-dev:example-prisma": [
      "Alias for create new migration for example-prisma (example: `npm run prisma:migrate-dev:example-prisma --name=new)`"
    ],
    "prisma:migrate-deploy:example-prisma": [
      "Applying migrations for example-prisma"
    ],
    "prisma:migrate-deploy": [
      "Applying migrations of all applications and modules"
    ],
    "prisma:pull": [
      "Generating a prisma schema based on a database"
    ],
    "prisma:generate": [
      "Generation of client prisma schema of all applications and modules"
    ],
    "prisma:pull:example-prisma": [
      "Generating a prisma schema based on a database for example-prisma"
    ],
    "prisma:pull:example-prisma-flyway": [
      "Generating a prisma schema based on a database for example-prisma-flyway"
    ],
    "prisma:migrate-dev-new:example-prisma-flyway": [
      "Command to create new empty migration for example-prisma-flyway"
    ],
    "prisma:migrate-dev:example-prisma-flyway": [
      "Alias for create new migration for example-prisma-flyway (example: `npm run prisma:migrate-dev:example-prisma-flyway --name=new)`"
    ],
    "prisma:migrate-deploy:example-prisma-flyway": [
      "Applying migrations for example-prisma-flyway"
    ],
    "flyway:create:example-prisma-flyway": [
      "Command to create new empty migration for example-prisma-flyway"
    ],
    "flyway:migrate:example-prisma-flyway": [
      "Applying migrations for example-prisma-flyway"
    ],
    "flyway:migrate": [
      "Applying migrations of all applications and modules"
    ],
    "generate": [
      "Running the \"generate\" nx command in applications and libraries which can be customized at your discretion",
      "automatically generating an index.ts file for each library",
      "checking the code and trying to fix it"
    ],
    "nx": [
      "Alias for running the nx version locally, which is in the project (example: `npm run nx -- dep-graph`),",
      "in order not to install nx globally in the operating system"
    ],
    "rucken": [
      "Alias for console tools and scripts for nx and not only use to automate the workflow and",
      "speed up the development process (example: `npm run rucken -- make-ts-list`, site: https://www.npmjs.com/package/rucken)"
    ],
    "dep-graph": [
      "Generating dependency diagrams for nx applications and libraries"
    ],
    "nx:many": [
      "Alias for running many nx commands (example: `npm run nx:many -- -t=lint`),",
      "an exception has been added for the root project,",
      "since sometimes an attempt to run an nx command on it can lead to the command freezing"
    ],
    "make-ts-list": [
      "Automatically generating an index.ts file for each library,",
      "works only for nx applications created using the `--projectNameAndRootFormat=as-provided` flag"
    ],
    "manual:prepare": [
      "Preparing code, building code, creating infrastructure documentation",
      "and all the files necessary to raise the infrastructure and running tests (generate, build, docs:infrastructure, test)"
    ],
    "update:nestjs-mod-versions": [
      "Updating NestJS-mod libraries"
    ],
    "tsc": [
      "Alias for running the tsc version locally, which is in the project (example: `npm run tsc -- --noEmit -p tsconfig.base.json`),",
      "in order not to install tsc globally in the operating system"
    ]
  }
}