
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TwoFactorUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TwoFactorUser
 * 
 */
export type TwoFactorUserModel = runtime.Types.Result.DefaultSelection<Prisma.$TwoFactorUserPayload>

export type AggregateTwoFactorUser = {
  _count: TwoFactorUserCountAggregateOutputType | null
  _min: TwoFactorUserMinAggregateOutputType | null
  _max: TwoFactorUserMaxAggregateOutputType | null
}

export type TwoFactorUserMinAggregateOutputType = {
  id: string | null
  username: string | null
  secret: string | null
  externalTenantId: string | null
  externalUserId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TwoFactorUserMaxAggregateOutputType = {
  id: string | null
  username: string | null
  secret: string | null
  externalTenantId: string | null
  externalUserId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TwoFactorUserCountAggregateOutputType = {
  id: number
  username: number
  secret: number
  externalTenantId: number
  externalUserId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TwoFactorUserMinAggregateInputType = {
  id?: true
  username?: true
  secret?: true
  externalTenantId?: true
  externalUserId?: true
  createdAt?: true
  updatedAt?: true
}

export type TwoFactorUserMaxAggregateInputType = {
  id?: true
  username?: true
  secret?: true
  externalTenantId?: true
  externalUserId?: true
  createdAt?: true
  updatedAt?: true
}

export type TwoFactorUserCountAggregateInputType = {
  id?: true
  username?: true
  secret?: true
  externalTenantId?: true
  externalUserId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TwoFactorUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TwoFactorUser to aggregate.
   */
  where?: Prisma.TwoFactorUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorUsers to fetch.
   */
  orderBy?: Prisma.TwoFactorUserOrderByWithRelationInput | Prisma.TwoFactorUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TwoFactorUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TwoFactorUsers
  **/
  _count?: true | TwoFactorUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TwoFactorUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TwoFactorUserMaxAggregateInputType
}

export type GetTwoFactorUserAggregateType<T extends TwoFactorUserAggregateArgs> = {
      [P in keyof T & keyof AggregateTwoFactorUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTwoFactorUser[P]>
    : Prisma.GetScalarType<T[P], AggregateTwoFactorUser[P]>
}




export type TwoFactorUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TwoFactorUserWhereInput
  orderBy?: Prisma.TwoFactorUserOrderByWithAggregationInput | Prisma.TwoFactorUserOrderByWithAggregationInput[]
  by: Prisma.TwoFactorUserScalarFieldEnum[] | Prisma.TwoFactorUserScalarFieldEnum
  having?: Prisma.TwoFactorUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TwoFactorUserCountAggregateInputType | true
  _min?: TwoFactorUserMinAggregateInputType
  _max?: TwoFactorUserMaxAggregateInputType
}

export type TwoFactorUserGroupByOutputType = {
  id: string
  username: string | null
  secret: string
  externalTenantId: string
  externalUserId: string
  createdAt: Date
  updatedAt: Date
  _count: TwoFactorUserCountAggregateOutputType | null
  _min: TwoFactorUserMinAggregateOutputType | null
  _max: TwoFactorUserMaxAggregateOutputType | null
}

type GetTwoFactorUserGroupByPayload<T extends TwoFactorUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TwoFactorUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TwoFactorUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TwoFactorUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TwoFactorUserGroupByOutputType[P]>
      }
    >
  > 



export type TwoFactorUserWhereInput = {
  AND?: Prisma.TwoFactorUserWhereInput | Prisma.TwoFactorUserWhereInput[]
  OR?: Prisma.TwoFactorUserWhereInput[]
  NOT?: Prisma.TwoFactorUserWhereInput | Prisma.TwoFactorUserWhereInput[]
  id?: Prisma.UuidFilter<"TwoFactorUser"> | string
  username?: Prisma.StringNullableFilter<"TwoFactorUser"> | string | null
  secret?: Prisma.StringFilter<"TwoFactorUser"> | string
  externalTenantId?: Prisma.UuidFilter<"TwoFactorUser"> | string
  externalUserId?: Prisma.UuidFilter<"TwoFactorUser"> | string
  createdAt?: Prisma.DateTimeFilter<"TwoFactorUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TwoFactorUser"> | Date | string
  TwoFactorCode?: Prisma.TwoFactorCodeListRelationFilter
}

export type TwoFactorUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrderInput | Prisma.SortOrder
  secret?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  TwoFactorCode?: Prisma.TwoFactorCodeOrderByRelationAggregateInput
}

export type TwoFactorUserWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  externalTenantId_externalUserId?: Prisma.TwoFactorUserExternalTenantIdExternalUserIdCompoundUniqueInput
  AND?: Prisma.TwoFactorUserWhereInput | Prisma.TwoFactorUserWhereInput[]
  OR?: Prisma.TwoFactorUserWhereInput[]
  NOT?: Prisma.TwoFactorUserWhereInput | Prisma.TwoFactorUserWhereInput[]
  username?: Prisma.StringNullableFilter<"TwoFactorUser"> | string | null
  secret?: Prisma.StringFilter<"TwoFactorUser"> | string
  externalTenantId?: Prisma.UuidFilter<"TwoFactorUser"> | string
  externalUserId?: Prisma.UuidFilter<"TwoFactorUser"> | string
  createdAt?: Prisma.DateTimeFilter<"TwoFactorUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TwoFactorUser"> | Date | string
  TwoFactorCode?: Prisma.TwoFactorCodeListRelationFilter
}, "id" | "externalTenantId_externalUserId">

export type TwoFactorUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrderInput | Prisma.SortOrder
  secret?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TwoFactorUserCountOrderByAggregateInput
  _max?: Prisma.TwoFactorUserMaxOrderByAggregateInput
  _min?: Prisma.TwoFactorUserMinOrderByAggregateInput
}

export type TwoFactorUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.TwoFactorUserScalarWhereWithAggregatesInput | Prisma.TwoFactorUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.TwoFactorUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TwoFactorUserScalarWhereWithAggregatesInput | Prisma.TwoFactorUserScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"TwoFactorUser"> | string
  username?: Prisma.StringNullableWithAggregatesFilter<"TwoFactorUser"> | string | null
  secret?: Prisma.StringWithAggregatesFilter<"TwoFactorUser"> | string
  externalTenantId?: Prisma.UuidWithAggregatesFilter<"TwoFactorUser"> | string
  externalUserId?: Prisma.UuidWithAggregatesFilter<"TwoFactorUser"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TwoFactorUser"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TwoFactorUser"> | Date | string
}

export type TwoFactorUserCreateInput = {
  id?: string
  username?: string | null
  secret: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  TwoFactorCode?: Prisma.TwoFactorCodeCreateNestedManyWithoutTwoFactorUserInput
}

export type TwoFactorUserUncheckedCreateInput = {
  id?: string
  username?: string | null
  secret: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  TwoFactorCode?: Prisma.TwoFactorCodeUncheckedCreateNestedManyWithoutTwoFactorUserInput
}

export type TwoFactorUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  secret?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  TwoFactorCode?: Prisma.TwoFactorCodeUpdateManyWithoutTwoFactorUserNestedInput
}

export type TwoFactorUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  secret?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  TwoFactorCode?: Prisma.TwoFactorCodeUncheckedUpdateManyWithoutTwoFactorUserNestedInput
}

export type TwoFactorUserCreateManyInput = {
  id?: string
  username?: string | null
  secret: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TwoFactorUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  secret?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TwoFactorUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  secret?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TwoFactorUserExternalTenantIdExternalUserIdCompoundUniqueInput = {
  externalTenantId: string
  externalUserId: string
}

export type TwoFactorUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  secret?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TwoFactorUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  secret?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TwoFactorUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  secret?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TwoFactorUserScalarRelationFilter = {
  is?: Prisma.TwoFactorUserWhereInput
  isNot?: Prisma.TwoFactorUserWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type TwoFactorUserCreateNestedOneWithoutTwoFactorCodeInput = {
  create?: Prisma.XOR<Prisma.TwoFactorUserCreateWithoutTwoFactorCodeInput, Prisma.TwoFactorUserUncheckedCreateWithoutTwoFactorCodeInput>
  connectOrCreate?: Prisma.TwoFactorUserCreateOrConnectWithoutTwoFactorCodeInput
  connect?: Prisma.TwoFactorUserWhereUniqueInput
}

export type TwoFactorUserUpdateOneRequiredWithoutTwoFactorCodeNestedInput = {
  create?: Prisma.XOR<Prisma.TwoFactorUserCreateWithoutTwoFactorCodeInput, Prisma.TwoFactorUserUncheckedCreateWithoutTwoFactorCodeInput>
  connectOrCreate?: Prisma.TwoFactorUserCreateOrConnectWithoutTwoFactorCodeInput
  upsert?: Prisma.TwoFactorUserUpsertWithoutTwoFactorCodeInput
  connect?: Prisma.TwoFactorUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TwoFactorUserUpdateToOneWithWhereWithoutTwoFactorCodeInput, Prisma.TwoFactorUserUpdateWithoutTwoFactorCodeInput>, Prisma.TwoFactorUserUncheckedUpdateWithoutTwoFactorCodeInput>
}

export type TwoFactorUserCreateWithoutTwoFactorCodeInput = {
  id?: string
  username?: string | null
  secret: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TwoFactorUserUncheckedCreateWithoutTwoFactorCodeInput = {
  id?: string
  username?: string | null
  secret: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TwoFactorUserCreateOrConnectWithoutTwoFactorCodeInput = {
  where: Prisma.TwoFactorUserWhereUniqueInput
  create: Prisma.XOR<Prisma.TwoFactorUserCreateWithoutTwoFactorCodeInput, Prisma.TwoFactorUserUncheckedCreateWithoutTwoFactorCodeInput>
}

export type TwoFactorUserUpsertWithoutTwoFactorCodeInput = {
  update: Prisma.XOR<Prisma.TwoFactorUserUpdateWithoutTwoFactorCodeInput, Prisma.TwoFactorUserUncheckedUpdateWithoutTwoFactorCodeInput>
  create: Prisma.XOR<Prisma.TwoFactorUserCreateWithoutTwoFactorCodeInput, Prisma.TwoFactorUserUncheckedCreateWithoutTwoFactorCodeInput>
  where?: Prisma.TwoFactorUserWhereInput
}

export type TwoFactorUserUpdateToOneWithWhereWithoutTwoFactorCodeInput = {
  where?: Prisma.TwoFactorUserWhereInput
  data: Prisma.XOR<Prisma.TwoFactorUserUpdateWithoutTwoFactorCodeInput, Prisma.TwoFactorUserUncheckedUpdateWithoutTwoFactorCodeInput>
}

export type TwoFactorUserUpdateWithoutTwoFactorCodeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  secret?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TwoFactorUserUncheckedUpdateWithoutTwoFactorCodeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  secret?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TwoFactorUserCountOutputType
 */

export type TwoFactorUserCountOutputType = {
  TwoFactorCode: number
}

export type TwoFactorUserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TwoFactorCode?: boolean | TwoFactorUserCountOutputTypeCountTwoFactorCodeArgs
}

/**
 * TwoFactorUserCountOutputType without action
 */
export type TwoFactorUserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUserCountOutputType
   */
  select?: Prisma.TwoFactorUserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TwoFactorUserCountOutputType without action
 */
export type TwoFactorUserCountOutputTypeCountTwoFactorCodeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TwoFactorCodeWhereInput
}


export type TwoFactorUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  secret?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  TwoFactorCode?: boolean | Prisma.TwoFactorUser$TwoFactorCodeArgs<ExtArgs>
  _count?: boolean | Prisma.TwoFactorUserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["twoFactorUser"]>

export type TwoFactorUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  secret?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["twoFactorUser"]>

export type TwoFactorUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  secret?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["twoFactorUser"]>

export type TwoFactorUserSelectScalar = {
  id?: boolean
  username?: boolean
  secret?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TwoFactorUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "username" | "secret" | "externalTenantId" | "externalUserId" | "createdAt" | "updatedAt", ExtArgs["result"]["twoFactorUser"]>
export type TwoFactorUserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TwoFactorCode?: boolean | Prisma.TwoFactorUser$TwoFactorCodeArgs<ExtArgs>
  _count?: boolean | Prisma.TwoFactorUserCountOutputTypeDefaultArgs<ExtArgs>
}
export type TwoFactorUserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TwoFactorUserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TwoFactorUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TwoFactorUser"
  objects: {
    TwoFactorCode: Prisma.$TwoFactorCodePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * @DtoCreateHidden
     */
    id: string
    username: string | null
    secret: string
    externalTenantId: string
    externalUserId: string
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    createdAt: Date
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    updatedAt: Date
  }, ExtArgs["result"]["twoFactorUser"]>
  composites: {}
}

export type TwoFactorUserGetPayload<S extends boolean | null | undefined | TwoFactorUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload, S>

export type TwoFactorUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TwoFactorUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TwoFactorUserCountAggregateInputType | true
  }

export interface TwoFactorUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TwoFactorUser'], meta: { name: 'TwoFactorUser' } }
  /**
   * Find zero or one TwoFactorUser that matches the filter.
   * @param {TwoFactorUserFindUniqueArgs} args - Arguments to find a TwoFactorUser
   * @example
   * // Get one TwoFactorUser
   * const twoFactorUser = await prisma.twoFactorUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TwoFactorUserFindUniqueArgs>(args: Prisma.SelectSubset<T, TwoFactorUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TwoFactorUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TwoFactorUserFindUniqueOrThrowArgs} args - Arguments to find a TwoFactorUser
   * @example
   * // Get one TwoFactorUser
   * const twoFactorUser = await prisma.twoFactorUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TwoFactorUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TwoFactorUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TwoFactorUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorUserFindFirstArgs} args - Arguments to find a TwoFactorUser
   * @example
   * // Get one TwoFactorUser
   * const twoFactorUser = await prisma.twoFactorUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TwoFactorUserFindFirstArgs>(args?: Prisma.SelectSubset<T, TwoFactorUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TwoFactorUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorUserFindFirstOrThrowArgs} args - Arguments to find a TwoFactorUser
   * @example
   * // Get one TwoFactorUser
   * const twoFactorUser = await prisma.twoFactorUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TwoFactorUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TwoFactorUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TwoFactorUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TwoFactorUsers
   * const twoFactorUsers = await prisma.twoFactorUser.findMany()
   * 
   * // Get first 10 TwoFactorUsers
   * const twoFactorUsers = await prisma.twoFactorUser.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const twoFactorUserWithIdOnly = await prisma.twoFactorUser.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TwoFactorUserFindManyArgs>(args?: Prisma.SelectSubset<T, TwoFactorUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TwoFactorUser.
   * @param {TwoFactorUserCreateArgs} args - Arguments to create a TwoFactorUser.
   * @example
   * // Create one TwoFactorUser
   * const TwoFactorUser = await prisma.twoFactorUser.create({
   *   data: {
   *     // ... data to create a TwoFactorUser
   *   }
   * })
   * 
   */
  create<T extends TwoFactorUserCreateArgs>(args: Prisma.SelectSubset<T, TwoFactorUserCreateArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TwoFactorUsers.
   * @param {TwoFactorUserCreateManyArgs} args - Arguments to create many TwoFactorUsers.
   * @example
   * // Create many TwoFactorUsers
   * const twoFactorUser = await prisma.twoFactorUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TwoFactorUserCreateManyArgs>(args?: Prisma.SelectSubset<T, TwoFactorUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TwoFactorUsers and returns the data saved in the database.
   * @param {TwoFactorUserCreateManyAndReturnArgs} args - Arguments to create many TwoFactorUsers.
   * @example
   * // Create many TwoFactorUsers
   * const twoFactorUser = await prisma.twoFactorUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TwoFactorUsers and only return the `id`
   * const twoFactorUserWithIdOnly = await prisma.twoFactorUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TwoFactorUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TwoFactorUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TwoFactorUser.
   * @param {TwoFactorUserDeleteArgs} args - Arguments to delete one TwoFactorUser.
   * @example
   * // Delete one TwoFactorUser
   * const TwoFactorUser = await prisma.twoFactorUser.delete({
   *   where: {
   *     // ... filter to delete one TwoFactorUser
   *   }
   * })
   * 
   */
  delete<T extends TwoFactorUserDeleteArgs>(args: Prisma.SelectSubset<T, TwoFactorUserDeleteArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TwoFactorUser.
   * @param {TwoFactorUserUpdateArgs} args - Arguments to update one TwoFactorUser.
   * @example
   * // Update one TwoFactorUser
   * const twoFactorUser = await prisma.twoFactorUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TwoFactorUserUpdateArgs>(args: Prisma.SelectSubset<T, TwoFactorUserUpdateArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TwoFactorUsers.
   * @param {TwoFactorUserDeleteManyArgs} args - Arguments to filter TwoFactorUsers to delete.
   * @example
   * // Delete a few TwoFactorUsers
   * const { count } = await prisma.twoFactorUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TwoFactorUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, TwoFactorUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TwoFactorUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TwoFactorUsers
   * const twoFactorUser = await prisma.twoFactorUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TwoFactorUserUpdateManyArgs>(args: Prisma.SelectSubset<T, TwoFactorUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TwoFactorUsers and returns the data updated in the database.
   * @param {TwoFactorUserUpdateManyAndReturnArgs} args - Arguments to update many TwoFactorUsers.
   * @example
   * // Update many TwoFactorUsers
   * const twoFactorUser = await prisma.twoFactorUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TwoFactorUsers and only return the `id`
   * const twoFactorUserWithIdOnly = await prisma.twoFactorUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TwoFactorUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TwoFactorUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TwoFactorUser.
   * @param {TwoFactorUserUpsertArgs} args - Arguments to update or create a TwoFactorUser.
   * @example
   * // Update or create a TwoFactorUser
   * const twoFactorUser = await prisma.twoFactorUser.upsert({
   *   create: {
   *     // ... data to create a TwoFactorUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TwoFactorUser we want to update
   *   }
   * })
   */
  upsert<T extends TwoFactorUserUpsertArgs>(args: Prisma.SelectSubset<T, TwoFactorUserUpsertArgs<ExtArgs>>): Prisma.Prisma__TwoFactorUserClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TwoFactorUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorUserCountArgs} args - Arguments to filter TwoFactorUsers to count.
   * @example
   * // Count the number of TwoFactorUsers
   * const count = await prisma.twoFactorUser.count({
   *   where: {
   *     // ... the filter for the TwoFactorUsers we want to count
   *   }
   * })
  **/
  count<T extends TwoFactorUserCountArgs>(
    args?: Prisma.Subset<T, TwoFactorUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TwoFactorUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TwoFactorUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TwoFactorUserAggregateArgs>(args: Prisma.Subset<T, TwoFactorUserAggregateArgs>): Prisma.PrismaPromise<GetTwoFactorUserAggregateType<T>>

  /**
   * Group by TwoFactorUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TwoFactorUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TwoFactorUserGroupByArgs['orderBy'] }
      : { orderBy?: TwoFactorUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TwoFactorUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwoFactorUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TwoFactorUser model
 */
readonly fields: TwoFactorUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TwoFactorUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TwoFactorUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  TwoFactorCode<T extends Prisma.TwoFactorUser$TwoFactorCodeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TwoFactorUser$TwoFactorCodeArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TwoFactorCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TwoFactorUser model
 */
export interface TwoFactorUserFieldRefs {
  readonly id: Prisma.FieldRef<"TwoFactorUser", 'String'>
  readonly username: Prisma.FieldRef<"TwoFactorUser", 'String'>
  readonly secret: Prisma.FieldRef<"TwoFactorUser", 'String'>
  readonly externalTenantId: Prisma.FieldRef<"TwoFactorUser", 'String'>
  readonly externalUserId: Prisma.FieldRef<"TwoFactorUser", 'String'>
  readonly createdAt: Prisma.FieldRef<"TwoFactorUser", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TwoFactorUser", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TwoFactorUser findUnique
 */
export type TwoFactorUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorUser to fetch.
   */
  where: Prisma.TwoFactorUserWhereUniqueInput
}

/**
 * TwoFactorUser findUniqueOrThrow
 */
export type TwoFactorUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorUser to fetch.
   */
  where: Prisma.TwoFactorUserWhereUniqueInput
}

/**
 * TwoFactorUser findFirst
 */
export type TwoFactorUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorUser to fetch.
   */
  where?: Prisma.TwoFactorUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorUsers to fetch.
   */
  orderBy?: Prisma.TwoFactorUserOrderByWithRelationInput | Prisma.TwoFactorUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TwoFactorUsers.
   */
  cursor?: Prisma.TwoFactorUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TwoFactorUsers.
   */
  distinct?: Prisma.TwoFactorUserScalarFieldEnum | Prisma.TwoFactorUserScalarFieldEnum[]
}

/**
 * TwoFactorUser findFirstOrThrow
 */
export type TwoFactorUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorUser to fetch.
   */
  where?: Prisma.TwoFactorUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorUsers to fetch.
   */
  orderBy?: Prisma.TwoFactorUserOrderByWithRelationInput | Prisma.TwoFactorUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TwoFactorUsers.
   */
  cursor?: Prisma.TwoFactorUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TwoFactorUsers.
   */
  distinct?: Prisma.TwoFactorUserScalarFieldEnum | Prisma.TwoFactorUserScalarFieldEnum[]
}

/**
 * TwoFactorUser findMany
 */
export type TwoFactorUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorUsers to fetch.
   */
  where?: Prisma.TwoFactorUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorUsers to fetch.
   */
  orderBy?: Prisma.TwoFactorUserOrderByWithRelationInput | Prisma.TwoFactorUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TwoFactorUsers.
   */
  cursor?: Prisma.TwoFactorUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorUsers.
   */
  skip?: number
  distinct?: Prisma.TwoFactorUserScalarFieldEnum | Prisma.TwoFactorUserScalarFieldEnum[]
}

/**
 * TwoFactorUser create
 */
export type TwoFactorUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * The data needed to create a TwoFactorUser.
   */
  data: Prisma.XOR<Prisma.TwoFactorUserCreateInput, Prisma.TwoFactorUserUncheckedCreateInput>
}

/**
 * TwoFactorUser createMany
 */
export type TwoFactorUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TwoFactorUsers.
   */
  data: Prisma.TwoFactorUserCreateManyInput | Prisma.TwoFactorUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TwoFactorUser createManyAndReturn
 */
export type TwoFactorUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * The data used to create many TwoFactorUsers.
   */
  data: Prisma.TwoFactorUserCreateManyInput | Prisma.TwoFactorUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TwoFactorUser update
 */
export type TwoFactorUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * The data needed to update a TwoFactorUser.
   */
  data: Prisma.XOR<Prisma.TwoFactorUserUpdateInput, Prisma.TwoFactorUserUncheckedUpdateInput>
  /**
   * Choose, which TwoFactorUser to update.
   */
  where: Prisma.TwoFactorUserWhereUniqueInput
}

/**
 * TwoFactorUser updateMany
 */
export type TwoFactorUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TwoFactorUsers.
   */
  data: Prisma.XOR<Prisma.TwoFactorUserUpdateManyMutationInput, Prisma.TwoFactorUserUncheckedUpdateManyInput>
  /**
   * Filter which TwoFactorUsers to update
   */
  where?: Prisma.TwoFactorUserWhereInput
  /**
   * Limit how many TwoFactorUsers to update.
   */
  limit?: number
}

/**
 * TwoFactorUser updateManyAndReturn
 */
export type TwoFactorUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * The data used to update TwoFactorUsers.
   */
  data: Prisma.XOR<Prisma.TwoFactorUserUpdateManyMutationInput, Prisma.TwoFactorUserUncheckedUpdateManyInput>
  /**
   * Filter which TwoFactorUsers to update
   */
  where?: Prisma.TwoFactorUserWhereInput
  /**
   * Limit how many TwoFactorUsers to update.
   */
  limit?: number
}

/**
 * TwoFactorUser upsert
 */
export type TwoFactorUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * The filter to search for the TwoFactorUser to update in case it exists.
   */
  where: Prisma.TwoFactorUserWhereUniqueInput
  /**
   * In case the TwoFactorUser found by the `where` argument doesn't exist, create a new TwoFactorUser with this data.
   */
  create: Prisma.XOR<Prisma.TwoFactorUserCreateInput, Prisma.TwoFactorUserUncheckedCreateInput>
  /**
   * In case the TwoFactorUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TwoFactorUserUpdateInput, Prisma.TwoFactorUserUncheckedUpdateInput>
}

/**
 * TwoFactorUser delete
 */
export type TwoFactorUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
  /**
   * Filter which TwoFactorUser to delete.
   */
  where: Prisma.TwoFactorUserWhereUniqueInput
}

/**
 * TwoFactorUser deleteMany
 */
export type TwoFactorUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TwoFactorUsers to delete
   */
  where?: Prisma.TwoFactorUserWhereInput
  /**
   * Limit how many TwoFactorUsers to delete.
   */
  limit?: number
}

/**
 * TwoFactorUser.TwoFactorCode
 */
export type TwoFactorUser$TwoFactorCodeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorCode
   */
  select?: Prisma.TwoFactorCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorCode
   */
  omit?: Prisma.TwoFactorCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorCodeInclude<ExtArgs> | null
  where?: Prisma.TwoFactorCodeWhereInput
  orderBy?: Prisma.TwoFactorCodeOrderByWithRelationInput | Prisma.TwoFactorCodeOrderByWithRelationInput[]
  cursor?: Prisma.TwoFactorCodeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TwoFactorCodeScalarFieldEnum | Prisma.TwoFactorCodeScalarFieldEnum[]
}

/**
 * TwoFactorUser without action
 */
export type TwoFactorUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorUser
   */
  select?: Prisma.TwoFactorUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorUser
   */
  omit?: Prisma.TwoFactorUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorUserInclude<ExtArgs> | null
}
