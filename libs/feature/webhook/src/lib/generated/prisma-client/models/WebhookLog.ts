
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WebhookLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WebhookLog
 * 
 */
export type WebhookLogModel = runtime.Types.Result.DefaultSelection<Prisma.$WebhookLogPayload>

export type AggregateWebhookLog = {
  _count: WebhookLogCountAggregateOutputType | null
  _min: WebhookLogMinAggregateOutputType | null
  _max: WebhookLogMaxAggregateOutputType | null
}

export type WebhookLogMinAggregateOutputType = {
  id: string | null
  responseStatus: string | null
  webhookStatus: $Enums.WebhookStatus | null
  webhookId: string | null
  externalTenantId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WebhookLogMaxAggregateOutputType = {
  id: string | null
  responseStatus: string | null
  webhookStatus: $Enums.WebhookStatus | null
  webhookId: string | null
  externalTenantId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WebhookLogCountAggregateOutputType = {
  id: number
  request: number
  responseStatus: number
  response: number
  webhookStatus: number
  webhookId: number
  externalTenantId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WebhookLogMinAggregateInputType = {
  id?: true
  responseStatus?: true
  webhookStatus?: true
  webhookId?: true
  externalTenantId?: true
  createdAt?: true
  updatedAt?: true
}

export type WebhookLogMaxAggregateInputType = {
  id?: true
  responseStatus?: true
  webhookStatus?: true
  webhookId?: true
  externalTenantId?: true
  createdAt?: true
  updatedAt?: true
}

export type WebhookLogCountAggregateInputType = {
  id?: true
  request?: true
  responseStatus?: true
  response?: true
  webhookStatus?: true
  webhookId?: true
  externalTenantId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WebhookLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebhookLog to aggregate.
   */
  where?: Prisma.WebhookLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebhookLogs to fetch.
   */
  orderBy?: Prisma.WebhookLogOrderByWithRelationInput | Prisma.WebhookLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WebhookLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebhookLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebhookLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WebhookLogs
  **/
  _count?: true | WebhookLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WebhookLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WebhookLogMaxAggregateInputType
}

export type GetWebhookLogAggregateType<T extends WebhookLogAggregateArgs> = {
      [P in keyof T & keyof AggregateWebhookLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWebhookLog[P]>
    : Prisma.GetScalarType<T[P], AggregateWebhookLog[P]>
}




export type WebhookLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WebhookLogWhereInput
  orderBy?: Prisma.WebhookLogOrderByWithAggregationInput | Prisma.WebhookLogOrderByWithAggregationInput[]
  by: Prisma.WebhookLogScalarFieldEnum[] | Prisma.WebhookLogScalarFieldEnum
  having?: Prisma.WebhookLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WebhookLogCountAggregateInputType | true
  _min?: WebhookLogMinAggregateInputType
  _max?: WebhookLogMaxAggregateInputType
}

export type WebhookLogGroupByOutputType = {
  id: string
  request: runtime.JsonValue
  responseStatus: string
  response: runtime.JsonValue | null
  webhookStatus: $Enums.WebhookStatus
  webhookId: string
  externalTenantId: string
  createdAt: Date
  updatedAt: Date
  _count: WebhookLogCountAggregateOutputType | null
  _min: WebhookLogMinAggregateOutputType | null
  _max: WebhookLogMaxAggregateOutputType | null
}

type GetWebhookLogGroupByPayload<T extends WebhookLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WebhookLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WebhookLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WebhookLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WebhookLogGroupByOutputType[P]>
      }
    >
  > 



export type WebhookLogWhereInput = {
  AND?: Prisma.WebhookLogWhereInput | Prisma.WebhookLogWhereInput[]
  OR?: Prisma.WebhookLogWhereInput[]
  NOT?: Prisma.WebhookLogWhereInput | Prisma.WebhookLogWhereInput[]
  id?: Prisma.UuidFilter<"WebhookLog"> | string
  request?: Prisma.JsonFilter<"WebhookLog">
  responseStatus?: Prisma.StringFilter<"WebhookLog"> | string
  response?: Prisma.JsonNullableFilter<"WebhookLog">
  webhookStatus?: Prisma.EnumWebhookStatusFilter<"WebhookLog"> | $Enums.WebhookStatus
  webhookId?: Prisma.UuidFilter<"WebhookLog"> | string
  externalTenantId?: Prisma.UuidFilter<"WebhookLog"> | string
  createdAt?: Prisma.DateTimeFilter<"WebhookLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebhookLog"> | Date | string
  Webhook?: Prisma.XOR<Prisma.WebhookScalarRelationFilter, Prisma.WebhookWhereInput>
}

export type WebhookLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  request?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  response?: Prisma.SortOrderInput | Prisma.SortOrder
  webhookStatus?: Prisma.SortOrder
  webhookId?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Webhook?: Prisma.WebhookOrderByWithRelationInput
}

export type WebhookLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.WebhookLogWhereInput | Prisma.WebhookLogWhereInput[]
  OR?: Prisma.WebhookLogWhereInput[]
  NOT?: Prisma.WebhookLogWhereInput | Prisma.WebhookLogWhereInput[]
  request?: Prisma.JsonFilter<"WebhookLog">
  responseStatus?: Prisma.StringFilter<"WebhookLog"> | string
  response?: Prisma.JsonNullableFilter<"WebhookLog">
  webhookStatus?: Prisma.EnumWebhookStatusFilter<"WebhookLog"> | $Enums.WebhookStatus
  webhookId?: Prisma.UuidFilter<"WebhookLog"> | string
  externalTenantId?: Prisma.UuidFilter<"WebhookLog"> | string
  createdAt?: Prisma.DateTimeFilter<"WebhookLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebhookLog"> | Date | string
  Webhook?: Prisma.XOR<Prisma.WebhookScalarRelationFilter, Prisma.WebhookWhereInput>
}, "id">

export type WebhookLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  request?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  response?: Prisma.SortOrderInput | Prisma.SortOrder
  webhookStatus?: Prisma.SortOrder
  webhookId?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WebhookLogCountOrderByAggregateInput
  _max?: Prisma.WebhookLogMaxOrderByAggregateInput
  _min?: Prisma.WebhookLogMinOrderByAggregateInput
}

export type WebhookLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.WebhookLogScalarWhereWithAggregatesInput | Prisma.WebhookLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.WebhookLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WebhookLogScalarWhereWithAggregatesInput | Prisma.WebhookLogScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"WebhookLog"> | string
  request?: Prisma.JsonWithAggregatesFilter<"WebhookLog">
  responseStatus?: Prisma.StringWithAggregatesFilter<"WebhookLog"> | string
  response?: Prisma.JsonNullableWithAggregatesFilter<"WebhookLog">
  webhookStatus?: Prisma.EnumWebhookStatusWithAggregatesFilter<"WebhookLog"> | $Enums.WebhookStatus
  webhookId?: Prisma.UuidWithAggregatesFilter<"WebhookLog"> | string
  externalTenantId?: Prisma.UuidWithAggregatesFilter<"WebhookLog"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WebhookLog"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WebhookLog"> | Date | string
}

export type WebhookLogCreateInput = {
  id?: string
  request: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus: string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus: $Enums.WebhookStatus
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Webhook: Prisma.WebhookCreateNestedOneWithoutWebhookLogInput
}

export type WebhookLogUncheckedCreateInput = {
  id?: string
  request: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus: string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus: $Enums.WebhookStatus
  webhookId: string
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WebhookLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  request?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus?: Prisma.StringFieldUpdateOperationsInput | string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus?: Prisma.EnumWebhookStatusFieldUpdateOperationsInput | $Enums.WebhookStatus
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Webhook?: Prisma.WebhookUpdateOneRequiredWithoutWebhookLogNestedInput
}

export type WebhookLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  request?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus?: Prisma.StringFieldUpdateOperationsInput | string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus?: Prisma.EnumWebhookStatusFieldUpdateOperationsInput | $Enums.WebhookStatus
  webhookId?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WebhookLogCreateManyInput = {
  id?: string
  request: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus: string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus: $Enums.WebhookStatus
  webhookId: string
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WebhookLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  request?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus?: Prisma.StringFieldUpdateOperationsInput | string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus?: Prisma.EnumWebhookStatusFieldUpdateOperationsInput | $Enums.WebhookStatus
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WebhookLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  request?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus?: Prisma.StringFieldUpdateOperationsInput | string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus?: Prisma.EnumWebhookStatusFieldUpdateOperationsInput | $Enums.WebhookStatus
  webhookId?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WebhookLogListRelationFilter = {
  every?: Prisma.WebhookLogWhereInput
  some?: Prisma.WebhookLogWhereInput
  none?: Prisma.WebhookLogWhereInput
}

export type WebhookLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WebhookLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  request?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  response?: Prisma.SortOrder
  webhookStatus?: Prisma.SortOrder
  webhookId?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WebhookLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  webhookStatus?: Prisma.SortOrder
  webhookId?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WebhookLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  webhookStatus?: Prisma.SortOrder
  webhookId?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WebhookLogCreateNestedManyWithoutWebhookInput = {
  create?: Prisma.XOR<Prisma.WebhookLogCreateWithoutWebhookInput, Prisma.WebhookLogUncheckedCreateWithoutWebhookInput> | Prisma.WebhookLogCreateWithoutWebhookInput[] | Prisma.WebhookLogUncheckedCreateWithoutWebhookInput[]
  connectOrCreate?: Prisma.WebhookLogCreateOrConnectWithoutWebhookInput | Prisma.WebhookLogCreateOrConnectWithoutWebhookInput[]
  createMany?: Prisma.WebhookLogCreateManyWebhookInputEnvelope
  connect?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
}

export type WebhookLogUncheckedCreateNestedManyWithoutWebhookInput = {
  create?: Prisma.XOR<Prisma.WebhookLogCreateWithoutWebhookInput, Prisma.WebhookLogUncheckedCreateWithoutWebhookInput> | Prisma.WebhookLogCreateWithoutWebhookInput[] | Prisma.WebhookLogUncheckedCreateWithoutWebhookInput[]
  connectOrCreate?: Prisma.WebhookLogCreateOrConnectWithoutWebhookInput | Prisma.WebhookLogCreateOrConnectWithoutWebhookInput[]
  createMany?: Prisma.WebhookLogCreateManyWebhookInputEnvelope
  connect?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
}

export type WebhookLogUpdateManyWithoutWebhookNestedInput = {
  create?: Prisma.XOR<Prisma.WebhookLogCreateWithoutWebhookInput, Prisma.WebhookLogUncheckedCreateWithoutWebhookInput> | Prisma.WebhookLogCreateWithoutWebhookInput[] | Prisma.WebhookLogUncheckedCreateWithoutWebhookInput[]
  connectOrCreate?: Prisma.WebhookLogCreateOrConnectWithoutWebhookInput | Prisma.WebhookLogCreateOrConnectWithoutWebhookInput[]
  upsert?: Prisma.WebhookLogUpsertWithWhereUniqueWithoutWebhookInput | Prisma.WebhookLogUpsertWithWhereUniqueWithoutWebhookInput[]
  createMany?: Prisma.WebhookLogCreateManyWebhookInputEnvelope
  set?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  disconnect?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  delete?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  connect?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  update?: Prisma.WebhookLogUpdateWithWhereUniqueWithoutWebhookInput | Prisma.WebhookLogUpdateWithWhereUniqueWithoutWebhookInput[]
  updateMany?: Prisma.WebhookLogUpdateManyWithWhereWithoutWebhookInput | Prisma.WebhookLogUpdateManyWithWhereWithoutWebhookInput[]
  deleteMany?: Prisma.WebhookLogScalarWhereInput | Prisma.WebhookLogScalarWhereInput[]
}

export type WebhookLogUncheckedUpdateManyWithoutWebhookNestedInput = {
  create?: Prisma.XOR<Prisma.WebhookLogCreateWithoutWebhookInput, Prisma.WebhookLogUncheckedCreateWithoutWebhookInput> | Prisma.WebhookLogCreateWithoutWebhookInput[] | Prisma.WebhookLogUncheckedCreateWithoutWebhookInput[]
  connectOrCreate?: Prisma.WebhookLogCreateOrConnectWithoutWebhookInput | Prisma.WebhookLogCreateOrConnectWithoutWebhookInput[]
  upsert?: Prisma.WebhookLogUpsertWithWhereUniqueWithoutWebhookInput | Prisma.WebhookLogUpsertWithWhereUniqueWithoutWebhookInput[]
  createMany?: Prisma.WebhookLogCreateManyWebhookInputEnvelope
  set?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  disconnect?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  delete?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  connect?: Prisma.WebhookLogWhereUniqueInput | Prisma.WebhookLogWhereUniqueInput[]
  update?: Prisma.WebhookLogUpdateWithWhereUniqueWithoutWebhookInput | Prisma.WebhookLogUpdateWithWhereUniqueWithoutWebhookInput[]
  updateMany?: Prisma.WebhookLogUpdateManyWithWhereWithoutWebhookInput | Prisma.WebhookLogUpdateManyWithWhereWithoutWebhookInput[]
  deleteMany?: Prisma.WebhookLogScalarWhereInput | Prisma.WebhookLogScalarWhereInput[]
}

export type EnumWebhookStatusFieldUpdateOperationsInput = {
  set?: $Enums.WebhookStatus
}

export type WebhookLogCreateWithoutWebhookInput = {
  id?: string
  request: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus: string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus: $Enums.WebhookStatus
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WebhookLogUncheckedCreateWithoutWebhookInput = {
  id?: string
  request: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus: string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus: $Enums.WebhookStatus
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WebhookLogCreateOrConnectWithoutWebhookInput = {
  where: Prisma.WebhookLogWhereUniqueInput
  create: Prisma.XOR<Prisma.WebhookLogCreateWithoutWebhookInput, Prisma.WebhookLogUncheckedCreateWithoutWebhookInput>
}

export type WebhookLogCreateManyWebhookInputEnvelope = {
  data: Prisma.WebhookLogCreateManyWebhookInput | Prisma.WebhookLogCreateManyWebhookInput[]
  skipDuplicates?: boolean
}

export type WebhookLogUpsertWithWhereUniqueWithoutWebhookInput = {
  where: Prisma.WebhookLogWhereUniqueInput
  update: Prisma.XOR<Prisma.WebhookLogUpdateWithoutWebhookInput, Prisma.WebhookLogUncheckedUpdateWithoutWebhookInput>
  create: Prisma.XOR<Prisma.WebhookLogCreateWithoutWebhookInput, Prisma.WebhookLogUncheckedCreateWithoutWebhookInput>
}

export type WebhookLogUpdateWithWhereUniqueWithoutWebhookInput = {
  where: Prisma.WebhookLogWhereUniqueInput
  data: Prisma.XOR<Prisma.WebhookLogUpdateWithoutWebhookInput, Prisma.WebhookLogUncheckedUpdateWithoutWebhookInput>
}

export type WebhookLogUpdateManyWithWhereWithoutWebhookInput = {
  where: Prisma.WebhookLogScalarWhereInput
  data: Prisma.XOR<Prisma.WebhookLogUpdateManyMutationInput, Prisma.WebhookLogUncheckedUpdateManyWithoutWebhookInput>
}

export type WebhookLogScalarWhereInput = {
  AND?: Prisma.WebhookLogScalarWhereInput | Prisma.WebhookLogScalarWhereInput[]
  OR?: Prisma.WebhookLogScalarWhereInput[]
  NOT?: Prisma.WebhookLogScalarWhereInput | Prisma.WebhookLogScalarWhereInput[]
  id?: Prisma.UuidFilter<"WebhookLog"> | string
  request?: Prisma.JsonFilter<"WebhookLog">
  responseStatus?: Prisma.StringFilter<"WebhookLog"> | string
  response?: Prisma.JsonNullableFilter<"WebhookLog">
  webhookStatus?: Prisma.EnumWebhookStatusFilter<"WebhookLog"> | $Enums.WebhookStatus
  webhookId?: Prisma.UuidFilter<"WebhookLog"> | string
  externalTenantId?: Prisma.UuidFilter<"WebhookLog"> | string
  createdAt?: Prisma.DateTimeFilter<"WebhookLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebhookLog"> | Date | string
}

export type WebhookLogCreateManyWebhookInput = {
  id?: string
  request: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus: string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus: $Enums.WebhookStatus
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WebhookLogUpdateWithoutWebhookInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  request?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus?: Prisma.StringFieldUpdateOperationsInput | string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus?: Prisma.EnumWebhookStatusFieldUpdateOperationsInput | $Enums.WebhookStatus
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WebhookLogUncheckedUpdateWithoutWebhookInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  request?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus?: Prisma.StringFieldUpdateOperationsInput | string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus?: Prisma.EnumWebhookStatusFieldUpdateOperationsInput | $Enums.WebhookStatus
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WebhookLogUncheckedUpdateManyWithoutWebhookInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  request?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  responseStatus?: Prisma.StringFieldUpdateOperationsInput | string
  response?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  webhookStatus?: Prisma.EnumWebhookStatusFieldUpdateOperationsInput | $Enums.WebhookStatus
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WebhookLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  request?: boolean
  responseStatus?: boolean
  response?: boolean
  webhookStatus?: boolean
  webhookId?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Webhook?: boolean | Prisma.WebhookDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webhookLog"]>

export type WebhookLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  request?: boolean
  responseStatus?: boolean
  response?: boolean
  webhookStatus?: boolean
  webhookId?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Webhook?: boolean | Prisma.WebhookDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webhookLog"]>

export type WebhookLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  request?: boolean
  responseStatus?: boolean
  response?: boolean
  webhookStatus?: boolean
  webhookId?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Webhook?: boolean | Prisma.WebhookDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webhookLog"]>

export type WebhookLogSelectScalar = {
  id?: boolean
  request?: boolean
  responseStatus?: boolean
  response?: boolean
  webhookStatus?: boolean
  webhookId?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WebhookLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "request" | "responseStatus" | "response" | "webhookStatus" | "webhookId" | "externalTenantId" | "createdAt" | "updatedAt", ExtArgs["result"]["webhookLog"]>
export type WebhookLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Webhook?: boolean | Prisma.WebhookDefaultArgs<ExtArgs>
}
export type WebhookLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Webhook?: boolean | Prisma.WebhookDefaultArgs<ExtArgs>
}
export type WebhookLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Webhook?: boolean | Prisma.WebhookDefaultArgs<ExtArgs>
}

export type $WebhookLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WebhookLog"
  objects: {
    Webhook: Prisma.$WebhookPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * @DtoCreateHidden
     */
    id: string
    request: runtime.JsonValue
    responseStatus: string
    response: runtime.JsonValue | null
    webhookStatus: $Enums.WebhookStatus
    webhookId: string
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    externalTenantId: string
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    createdAt: Date
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    updatedAt: Date
  }, ExtArgs["result"]["webhookLog"]>
  composites: {}
}

export type WebhookLogGetPayload<S extends boolean | null | undefined | WebhookLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload, S>

export type WebhookLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WebhookLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WebhookLogCountAggregateInputType | true
  }

export interface WebhookLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookLog'], meta: { name: 'WebhookLog' } }
  /**
   * Find zero or one WebhookLog that matches the filter.
   * @param {WebhookLogFindUniqueArgs} args - Arguments to find a WebhookLog
   * @example
   * // Get one WebhookLog
   * const webhookLog = await prisma.webhookLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WebhookLogFindUniqueArgs>(args: Prisma.SelectSubset<T, WebhookLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WebhookLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WebhookLogFindUniqueOrThrowArgs} args - Arguments to find a WebhookLog
   * @example
   * // Get one WebhookLog
   * const webhookLog = await prisma.webhookLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WebhookLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WebhookLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebhookLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebhookLogFindFirstArgs} args - Arguments to find a WebhookLog
   * @example
   * // Get one WebhookLog
   * const webhookLog = await prisma.webhookLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WebhookLogFindFirstArgs>(args?: Prisma.SelectSubset<T, WebhookLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebhookLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebhookLogFindFirstOrThrowArgs} args - Arguments to find a WebhookLog
   * @example
   * // Get one WebhookLog
   * const webhookLog = await prisma.webhookLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WebhookLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WebhookLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WebhookLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebhookLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WebhookLogs
   * const webhookLogs = await prisma.webhookLog.findMany()
   * 
   * // Get first 10 WebhookLogs
   * const webhookLogs = await prisma.webhookLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const webhookLogWithIdOnly = await prisma.webhookLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WebhookLogFindManyArgs>(args?: Prisma.SelectSubset<T, WebhookLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WebhookLog.
   * @param {WebhookLogCreateArgs} args - Arguments to create a WebhookLog.
   * @example
   * // Create one WebhookLog
   * const WebhookLog = await prisma.webhookLog.create({
   *   data: {
   *     // ... data to create a WebhookLog
   *   }
   * })
   * 
   */
  create<T extends WebhookLogCreateArgs>(args: Prisma.SelectSubset<T, WebhookLogCreateArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WebhookLogs.
   * @param {WebhookLogCreateManyArgs} args - Arguments to create many WebhookLogs.
   * @example
   * // Create many WebhookLogs
   * const webhookLog = await prisma.webhookLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WebhookLogCreateManyArgs>(args?: Prisma.SelectSubset<T, WebhookLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WebhookLogs and returns the data saved in the database.
   * @param {WebhookLogCreateManyAndReturnArgs} args - Arguments to create many WebhookLogs.
   * @example
   * // Create many WebhookLogs
   * const webhookLog = await prisma.webhookLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WebhookLogs and only return the `id`
   * const webhookLogWithIdOnly = await prisma.webhookLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WebhookLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WebhookLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WebhookLog.
   * @param {WebhookLogDeleteArgs} args - Arguments to delete one WebhookLog.
   * @example
   * // Delete one WebhookLog
   * const WebhookLog = await prisma.webhookLog.delete({
   *   where: {
   *     // ... filter to delete one WebhookLog
   *   }
   * })
   * 
   */
  delete<T extends WebhookLogDeleteArgs>(args: Prisma.SelectSubset<T, WebhookLogDeleteArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WebhookLog.
   * @param {WebhookLogUpdateArgs} args - Arguments to update one WebhookLog.
   * @example
   * // Update one WebhookLog
   * const webhookLog = await prisma.webhookLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WebhookLogUpdateArgs>(args: Prisma.SelectSubset<T, WebhookLogUpdateArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WebhookLogs.
   * @param {WebhookLogDeleteManyArgs} args - Arguments to filter WebhookLogs to delete.
   * @example
   * // Delete a few WebhookLogs
   * const { count } = await prisma.webhookLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WebhookLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, WebhookLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebhookLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebhookLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WebhookLogs
   * const webhookLog = await prisma.webhookLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WebhookLogUpdateManyArgs>(args: Prisma.SelectSubset<T, WebhookLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebhookLogs and returns the data updated in the database.
   * @param {WebhookLogUpdateManyAndReturnArgs} args - Arguments to update many WebhookLogs.
   * @example
   * // Update many WebhookLogs
   * const webhookLog = await prisma.webhookLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WebhookLogs and only return the `id`
   * const webhookLogWithIdOnly = await prisma.webhookLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WebhookLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WebhookLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WebhookLog.
   * @param {WebhookLogUpsertArgs} args - Arguments to update or create a WebhookLog.
   * @example
   * // Update or create a WebhookLog
   * const webhookLog = await prisma.webhookLog.upsert({
   *   create: {
   *     // ... data to create a WebhookLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WebhookLog we want to update
   *   }
   * })
   */
  upsert<T extends WebhookLogUpsertArgs>(args: Prisma.SelectSubset<T, WebhookLogUpsertArgs<ExtArgs>>): Prisma.Prisma__WebhookLogClient<runtime.Types.Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WebhookLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebhookLogCountArgs} args - Arguments to filter WebhookLogs to count.
   * @example
   * // Count the number of WebhookLogs
   * const count = await prisma.webhookLog.count({
   *   where: {
   *     // ... the filter for the WebhookLogs we want to count
   *   }
   * })
  **/
  count<T extends WebhookLogCountArgs>(
    args?: Prisma.Subset<T, WebhookLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WebhookLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WebhookLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebhookLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WebhookLogAggregateArgs>(args: Prisma.Subset<T, WebhookLogAggregateArgs>): Prisma.PrismaPromise<GetWebhookLogAggregateType<T>>

  /**
   * Group by WebhookLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebhookLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WebhookLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WebhookLogGroupByArgs['orderBy'] }
      : { orderBy?: WebhookLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WebhookLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WebhookLog model
 */
readonly fields: WebhookLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WebhookLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WebhookLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Webhook<T extends Prisma.WebhookDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WebhookDefaultArgs<ExtArgs>>): Prisma.Prisma__WebhookClient<runtime.Types.Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WebhookLog model
 */
export interface WebhookLogFieldRefs {
  readonly id: Prisma.FieldRef<"WebhookLog", 'String'>
  readonly request: Prisma.FieldRef<"WebhookLog", 'Json'>
  readonly responseStatus: Prisma.FieldRef<"WebhookLog", 'String'>
  readonly response: Prisma.FieldRef<"WebhookLog", 'Json'>
  readonly webhookStatus: Prisma.FieldRef<"WebhookLog", 'WebhookStatus'>
  readonly webhookId: Prisma.FieldRef<"WebhookLog", 'String'>
  readonly externalTenantId: Prisma.FieldRef<"WebhookLog", 'String'>
  readonly createdAt: Prisma.FieldRef<"WebhookLog", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WebhookLog", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WebhookLog findUnique
 */
export type WebhookLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * Filter, which WebhookLog to fetch.
   */
  where: Prisma.WebhookLogWhereUniqueInput
}

/**
 * WebhookLog findUniqueOrThrow
 */
export type WebhookLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * Filter, which WebhookLog to fetch.
   */
  where: Prisma.WebhookLogWhereUniqueInput
}

/**
 * WebhookLog findFirst
 */
export type WebhookLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * Filter, which WebhookLog to fetch.
   */
  where?: Prisma.WebhookLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebhookLogs to fetch.
   */
  orderBy?: Prisma.WebhookLogOrderByWithRelationInput | Prisma.WebhookLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebhookLogs.
   */
  cursor?: Prisma.WebhookLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebhookLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebhookLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebhookLogs.
   */
  distinct?: Prisma.WebhookLogScalarFieldEnum | Prisma.WebhookLogScalarFieldEnum[]
}

/**
 * WebhookLog findFirstOrThrow
 */
export type WebhookLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * Filter, which WebhookLog to fetch.
   */
  where?: Prisma.WebhookLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebhookLogs to fetch.
   */
  orderBy?: Prisma.WebhookLogOrderByWithRelationInput | Prisma.WebhookLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebhookLogs.
   */
  cursor?: Prisma.WebhookLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebhookLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebhookLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebhookLogs.
   */
  distinct?: Prisma.WebhookLogScalarFieldEnum | Prisma.WebhookLogScalarFieldEnum[]
}

/**
 * WebhookLog findMany
 */
export type WebhookLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * Filter, which WebhookLogs to fetch.
   */
  where?: Prisma.WebhookLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebhookLogs to fetch.
   */
  orderBy?: Prisma.WebhookLogOrderByWithRelationInput | Prisma.WebhookLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WebhookLogs.
   */
  cursor?: Prisma.WebhookLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebhookLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebhookLogs.
   */
  skip?: number
  distinct?: Prisma.WebhookLogScalarFieldEnum | Prisma.WebhookLogScalarFieldEnum[]
}

/**
 * WebhookLog create
 */
export type WebhookLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * The data needed to create a WebhookLog.
   */
  data: Prisma.XOR<Prisma.WebhookLogCreateInput, Prisma.WebhookLogUncheckedCreateInput>
}

/**
 * WebhookLog createMany
 */
export type WebhookLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WebhookLogs.
   */
  data: Prisma.WebhookLogCreateManyInput | Prisma.WebhookLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WebhookLog createManyAndReturn
 */
export type WebhookLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * The data used to create many WebhookLogs.
   */
  data: Prisma.WebhookLogCreateManyInput | Prisma.WebhookLogCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WebhookLog update
 */
export type WebhookLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * The data needed to update a WebhookLog.
   */
  data: Prisma.XOR<Prisma.WebhookLogUpdateInput, Prisma.WebhookLogUncheckedUpdateInput>
  /**
   * Choose, which WebhookLog to update.
   */
  where: Prisma.WebhookLogWhereUniqueInput
}

/**
 * WebhookLog updateMany
 */
export type WebhookLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WebhookLogs.
   */
  data: Prisma.XOR<Prisma.WebhookLogUpdateManyMutationInput, Prisma.WebhookLogUncheckedUpdateManyInput>
  /**
   * Filter which WebhookLogs to update
   */
  where?: Prisma.WebhookLogWhereInput
  /**
   * Limit how many WebhookLogs to update.
   */
  limit?: number
}

/**
 * WebhookLog updateManyAndReturn
 */
export type WebhookLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * The data used to update WebhookLogs.
   */
  data: Prisma.XOR<Prisma.WebhookLogUpdateManyMutationInput, Prisma.WebhookLogUncheckedUpdateManyInput>
  /**
   * Filter which WebhookLogs to update
   */
  where?: Prisma.WebhookLogWhereInput
  /**
   * Limit how many WebhookLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WebhookLog upsert
 */
export type WebhookLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * The filter to search for the WebhookLog to update in case it exists.
   */
  where: Prisma.WebhookLogWhereUniqueInput
  /**
   * In case the WebhookLog found by the `where` argument doesn't exist, create a new WebhookLog with this data.
   */
  create: Prisma.XOR<Prisma.WebhookLogCreateInput, Prisma.WebhookLogUncheckedCreateInput>
  /**
   * In case the WebhookLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WebhookLogUpdateInput, Prisma.WebhookLogUncheckedUpdateInput>
}

/**
 * WebhookLog delete
 */
export type WebhookLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
  /**
   * Filter which WebhookLog to delete.
   */
  where: Prisma.WebhookLogWhereUniqueInput
}

/**
 * WebhookLog deleteMany
 */
export type WebhookLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebhookLogs to delete
   */
  where?: Prisma.WebhookLogWhereInput
  /**
   * Limit how many WebhookLogs to delete.
   */
  limit?: number
}

/**
 * WebhookLog without action
 */
export type WebhookLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebhookLog
   */
  select?: Prisma.WebhookLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebhookLog
   */
  omit?: Prisma.WebhookLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebhookLogInclude<ExtArgs> | null
}
