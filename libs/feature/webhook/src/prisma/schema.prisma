generator client {
  provider = "prisma-client"
  
  output   = "../../../../../libs/feature/webhook/src/lib/generated/prisma-client"
  
  previewFeatures = ["queryCompiler","driverAdapters"]
  moduleFormat = "cjs"
}
datasource db {
  provider          = "postgres"
  url               = env("SINGLE_SIGN_ON_WEBHOOK_DATABASE_URL")
}
generator prismaClassGenerator {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../lib/generated/rest-dto"
  annotateAllDtoProperties        = "true"
  classValidation                 = "true"
  createDtoPrefix                 = "Create"
  definiteAssignmentAssertion     = "true"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  exportRelationModifierClasses   = "true"
  fileNamingStyle                 = "kebab"
  flatResourceStructure           = "false"
  noDependencies                  = "false"
  outputToNestJsResourceStructure = "false"
  prettier                        = "true"
  reExport                        = "false"
  updateDtoPrefix                 = "Update"
}

model Webhook {
  /// @DtoCreateHidden
  id                                         String       @id(map: "PK_WEBHOOK") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventName                                  String       @db.VarChar(512)
  endpoint                                   String       @db.VarChar(512)
  enabled                                    Boolean
  headers                                    Json?
  requestTimeout                             Int?
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  externalTenantId                           String       @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdBy                                  String       @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedBy                                  String       @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt                                  DateTime     @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt                                  DateTime     @default(now()) @db.Timestamp(6)
  workUntilDate                              DateTime?    @db.Timestamp(6)
  WebhookUser_Webhook_createdByToWebhookUser WebhookUser  @relation("Webhook_createdByToWebhookUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_WEBHOOK__CREATED_BY")
  WebhookUser_Webhook_updatedByToWebhookUser WebhookUser  @relation("Webhook_updatedByToWebhookUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_WEBHOOK__UPDATED_BY")
  WebhookLog                                 WebhookLog[]

  @@index([externalTenantId, enabled], map: "IDX_WEBHOOK__ENABLED")
  @@index([externalTenantId, eventName], map: "IDX_WEBHOOK__EVENT_NAME")
  @@index([externalTenantId], map: "IDX_WEBHOOK__EXTERNAL_TENANT_ID")
}

model WebhookLog {
  /// @DtoCreateHidden
  id               String        @id(map: "PK_WEBHOOK_LOG") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  request          Json
  responseStatus   String        @db.VarChar(20)
  response         Json?
  webhookStatus    WebhookStatus
  webhookId        String        @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  externalTenantId String        @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt        DateTime      @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt        DateTime      @default(now()) @db.Timestamp(6)
  Webhook          Webhook       @relation(fields: [webhookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_WEBHOOK__WEBHOOK_ID")

  @@index([externalTenantId], map: "IDX_WEBHOOK_LOG__EXTERNAL_TENANT_ID")
  @@index([externalTenantId, webhookId], map: "IDX_WEBHOOK_LOG__WEBHOOK_ID")
  @@index([externalTenantId, webhookStatus], map: "IDX_WEBHOOK_LOG__WEBHOOK_STATUS")
}

model WebhookUser {
  /// @DtoCreateHidden
  id                                     String      @id(map: "PK_WEBHOOK_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  externalTenantId                       String      @db.Uuid
  externalUserId                         String      @db.Uuid
  userRole                               WebhookRole
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt                              DateTime    @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt                              DateTime    @default(now()) @db.Timestamp(6)
  Webhook_Webhook_createdByToWebhookUser Webhook[]   @relation("Webhook_createdByToWebhookUser")
  Webhook_Webhook_updatedByToWebhookUser Webhook[]   @relation("Webhook_updatedByToWebhookUser")

  @@unique([externalTenantId, externalUserId], map: "UQ_WEBHOOK_USER")
  @@index([externalTenantId], map: "IDX_WEBHOOK_USER__EXTERNAL_TENANT_ID")
  @@index([externalTenantId, userRole], map: "IDX_WEBHOOK_USER__USER_ROLE")
}

model migrations_webhook {
  installed_rank Int      @id(map: "__migrations_webhook_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "__migrations_webhook_s_idx")
  @@map("__migrations_webhook")
}

enum WebhookRole {
  Admin
  User
}

enum WebhookStatus {
  Pending
  Process
  Success
  Error
  Timeout
}
