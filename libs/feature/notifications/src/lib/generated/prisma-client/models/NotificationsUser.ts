
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `NotificationsUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model NotificationsUser
 * 
 */
export type NotificationsUserModel = runtime.Types.Result.DefaultSelection<Prisma.$NotificationsUserPayload>

export type AggregateNotificationsUser = {
  _count: NotificationsUserCountAggregateOutputType | null
  _min: NotificationsUserMinAggregateOutputType | null
  _max: NotificationsUserMaxAggregateOutputType | null
}

export type NotificationsUserMinAggregateOutputType = {
  id: string | null
  externalTenantId: string | null
  externalUserId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationsUserMaxAggregateOutputType = {
  id: string | null
  externalTenantId: string | null
  externalUserId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationsUserCountAggregateOutputType = {
  id: number
  externalTenantId: number
  externalUserId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type NotificationsUserMinAggregateInputType = {
  id?: true
  externalTenantId?: true
  externalUserId?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationsUserMaxAggregateInputType = {
  id?: true
  externalTenantId?: true
  externalUserId?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationsUserCountAggregateInputType = {
  id?: true
  externalTenantId?: true
  externalUserId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type NotificationsUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NotificationsUser to aggregate.
   */
  where?: Prisma.NotificationsUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsUsers to fetch.
   */
  orderBy?: Prisma.NotificationsUserOrderByWithRelationInput | Prisma.NotificationsUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NotificationsUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned NotificationsUsers
  **/
  _count?: true | NotificationsUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NotificationsUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NotificationsUserMaxAggregateInputType
}

export type GetNotificationsUserAggregateType<T extends NotificationsUserAggregateArgs> = {
      [P in keyof T & keyof AggregateNotificationsUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotificationsUser[P]>
    : Prisma.GetScalarType<T[P], AggregateNotificationsUser[P]>
}




export type NotificationsUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationsUserWhereInput
  orderBy?: Prisma.NotificationsUserOrderByWithAggregationInput | Prisma.NotificationsUserOrderByWithAggregationInput[]
  by: Prisma.NotificationsUserScalarFieldEnum[] | Prisma.NotificationsUserScalarFieldEnum
  having?: Prisma.NotificationsUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NotificationsUserCountAggregateInputType | true
  _min?: NotificationsUserMinAggregateInputType
  _max?: NotificationsUserMaxAggregateInputType
}

export type NotificationsUserGroupByOutputType = {
  id: string
  externalTenantId: string
  externalUserId: string
  createdAt: Date
  updatedAt: Date
  _count: NotificationsUserCountAggregateOutputType | null
  _min: NotificationsUserMinAggregateOutputType | null
  _max: NotificationsUserMaxAggregateOutputType | null
}

type GetNotificationsUserGroupByPayload<T extends NotificationsUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotificationsUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NotificationsUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotificationsUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotificationsUserGroupByOutputType[P]>
      }
    >
  > 



export type NotificationsUserWhereInput = {
  AND?: Prisma.NotificationsUserWhereInput | Prisma.NotificationsUserWhereInput[]
  OR?: Prisma.NotificationsUserWhereInput[]
  NOT?: Prisma.NotificationsUserWhereInput | Prisma.NotificationsUserWhereInput[]
  id?: Prisma.UuidFilter<"NotificationsUser"> | string
  externalTenantId?: Prisma.UuidFilter<"NotificationsUser"> | string
  externalUserId?: Prisma.UuidFilter<"NotificationsUser"> | string
  createdAt?: Prisma.DateTimeFilter<"NotificationsUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationsUser"> | Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventListRelationFilter
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventListRelationFilter
}

export type NotificationsUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventOrderByRelationAggregateInput
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventOrderByRelationAggregateInput
}

export type NotificationsUserWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  externalTenantId_externalUserId?: Prisma.NotificationsUserExternalTenantIdExternalUserIdCompoundUniqueInput
  AND?: Prisma.NotificationsUserWhereInput | Prisma.NotificationsUserWhereInput[]
  OR?: Prisma.NotificationsUserWhereInput[]
  NOT?: Prisma.NotificationsUserWhereInput | Prisma.NotificationsUserWhereInput[]
  externalTenantId?: Prisma.UuidFilter<"NotificationsUser"> | string
  externalUserId?: Prisma.UuidFilter<"NotificationsUser"> | string
  createdAt?: Prisma.DateTimeFilter<"NotificationsUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationsUser"> | Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventListRelationFilter
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventListRelationFilter
}, "id" | "externalTenantId_externalUserId">

export type NotificationsUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.NotificationsUserCountOrderByAggregateInput
  _max?: Prisma.NotificationsUserMaxOrderByAggregateInput
  _min?: Prisma.NotificationsUserMinOrderByAggregateInput
}

export type NotificationsUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.NotificationsUserScalarWhereWithAggregatesInput | Prisma.NotificationsUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.NotificationsUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NotificationsUserScalarWhereWithAggregatesInput | Prisma.NotificationsUserScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"NotificationsUser"> | string
  externalTenantId?: Prisma.UuidWithAggregatesFilter<"NotificationsUser"> | string
  externalUserId?: Prisma.UuidWithAggregatesFilter<"NotificationsUser"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"NotificationsUser"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"NotificationsUser"> | Date | string
}

export type NotificationsUserCreateInput = {
  id?: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventCreateNestedManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventCreateNestedManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput
}

export type NotificationsUserUncheckedCreateInput = {
  id?: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedCreateNestedManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedCreateNestedManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput
}

export type NotificationsUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserNestedInput
}

export type NotificationsUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserNestedInput
}

export type NotificationsUserCreateManyInput = {
  id?: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationsUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsUserExternalTenantIdExternalUserIdCompoundUniqueInput = {
  externalTenantId: string
  externalUserId: string
}

export type NotificationsUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationsUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationsUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  externalUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationsUserScalarRelationFilter = {
  is?: Prisma.NotificationsUserWhereInput
  isNot?: Prisma.NotificationsUserWhereInput
}

export type NotificationsUserNullableScalarRelationFilter = {
  is?: Prisma.NotificationsUserWhereInput | null
  isNot?: Prisma.NotificationsUserWhereInput | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NotificationsUserCreateNestedOneWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  create?: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>
  connectOrCreate?: Prisma.NotificationsUserCreateOrConnectWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput
  connect?: Prisma.NotificationsUserWhereUniqueInput
}

export type NotificationsUserCreateNestedOneWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  create?: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>
  connectOrCreate?: Prisma.NotificationsUserCreateOrConnectWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput
  connect?: Prisma.NotificationsUserWhereUniqueInput
}

export type NotificationsUserUpdateOneRequiredWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>
  connectOrCreate?: Prisma.NotificationsUserCreateOrConnectWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput
  upsert?: Prisma.NotificationsUserUpsertWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput
  connect?: Prisma.NotificationsUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.NotificationsUserUpdateToOneWithWhereWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>, Prisma.NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>
}

export type NotificationsUserUpdateOneWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>
  connectOrCreate?: Prisma.NotificationsUserCreateOrConnectWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput
  upsert?: Prisma.NotificationsUserUpsertWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput
  disconnect?: Prisma.NotificationsUserWhereInput | boolean
  delete?: Prisma.NotificationsUserWhereInput | boolean
  connect?: Prisma.NotificationsUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.NotificationsUserUpdateToOneWithWhereWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>, Prisma.NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>
}

export type NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventCreateNestedManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput
}

export type NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedCreateNestedManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput
}

export type NotificationsUserCreateOrConnectWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsUserWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>
}

export type NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventCreateNestedManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput
}

export type NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: string
  externalTenantId: string
  externalUserId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedCreateNestedManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput
}

export type NotificationsUserCreateOrConnectWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsUserWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>
}

export type NotificationsUserUpsertWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  update: Prisma.XOR<Prisma.NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>
  create: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>
  where?: Prisma.NotificationsUserWhereInput
}

export type NotificationsUserUpdateToOneWithWhereWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  where?: Prisma.NotificationsUserWhereInput
  data: Prisma.XOR<Prisma.NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput>
}

export type NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserNestedInput
}

export type NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserNestedInput
}

export type NotificationsUserUpsertWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  update: Prisma.XOR<Prisma.NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>
  create: Prisma.XOR<Prisma.NotificationsUserCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedCreateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>
  where?: Prisma.NotificationsUserWhereInput
}

export type NotificationsUserUpdateToOneWithWhereWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  where?: Prisma.NotificationsUserWhereInput
  data: Prisma.XOR<Prisma.NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput>
}

export type NotificationsUserUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput
}

export type NotificationsUserUncheckedUpdateWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput
}


/**
 * Count Type NotificationsUserCountOutputType
 */

export type NotificationsUserCountOutputType = {
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser: number
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser: number
}

export type NotificationsUserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | NotificationsUserCountOutputTypeCountNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserArgs
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | NotificationsUserCountOutputTypeCountNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserArgs
}

/**
 * NotificationsUserCountOutputType without action
 */
export type NotificationsUserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUserCountOutputType
   */
  select?: Prisma.NotificationsUserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * NotificationsUserCountOutputType without action
 */
export type NotificationsUserCountOutputTypeCountNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationsEventWhereInput
}

/**
 * NotificationsUserCountOutputType without action
 */
export type NotificationsUserCountOutputTypeCountNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationsEventWhereInput
}


export type NotificationsUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserArgs<ExtArgs>
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
  _count?: boolean | Prisma.NotificationsUserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["notificationsUser"]>

export type NotificationsUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["notificationsUser"]>

export type NotificationsUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["notificationsUser"]>

export type NotificationsUserSelectScalar = {
  id?: boolean
  externalTenantId?: boolean
  externalUserId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type NotificationsUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "externalTenantId" | "externalUserId" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationsUser"]>
export type NotificationsUserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserArgs<ExtArgs>
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
  _count?: boolean | Prisma.NotificationsUserCountOutputTypeDefaultArgs<ExtArgs>
}
export type NotificationsUserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type NotificationsUserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $NotificationsUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "NotificationsUser"
  objects: {
    NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser: Prisma.$NotificationsEventPayload<ExtArgs>[]
    NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser: Prisma.$NotificationsEventPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * @DtoCreateHidden
     */
    id: string
    externalTenantId: string
    externalUserId: string
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    createdAt: Date
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    updatedAt: Date
  }, ExtArgs["result"]["notificationsUser"]>
  composites: {}
}

export type NotificationsUserGetPayload<S extends boolean | null | undefined | NotificationsUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload, S>

export type NotificationsUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NotificationsUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NotificationsUserCountAggregateInputType | true
  }

export interface NotificationsUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationsUser'], meta: { name: 'NotificationsUser' } }
  /**
   * Find zero or one NotificationsUser that matches the filter.
   * @param {NotificationsUserFindUniqueArgs} args - Arguments to find a NotificationsUser
   * @example
   * // Get one NotificationsUser
   * const notificationsUser = await prisma.notificationsUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationsUserFindUniqueArgs>(args: Prisma.SelectSubset<T, NotificationsUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one NotificationsUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationsUserFindUniqueOrThrowArgs} args - Arguments to find a NotificationsUser
   * @example
   * // Get one NotificationsUser
   * const notificationsUser = await prisma.notificationsUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationsUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NotificationsUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NotificationsUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsUserFindFirstArgs} args - Arguments to find a NotificationsUser
   * @example
   * // Get one NotificationsUser
   * const notificationsUser = await prisma.notificationsUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationsUserFindFirstArgs>(args?: Prisma.SelectSubset<T, NotificationsUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NotificationsUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsUserFindFirstOrThrowArgs} args - Arguments to find a NotificationsUser
   * @example
   * // Get one NotificationsUser
   * const notificationsUser = await prisma.notificationsUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationsUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NotificationsUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more NotificationsUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NotificationsUsers
   * const notificationsUsers = await prisma.notificationsUser.findMany()
   * 
   * // Get first 10 NotificationsUsers
   * const notificationsUsers = await prisma.notificationsUser.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const notificationsUserWithIdOnly = await prisma.notificationsUser.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NotificationsUserFindManyArgs>(args?: Prisma.SelectSubset<T, NotificationsUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a NotificationsUser.
   * @param {NotificationsUserCreateArgs} args - Arguments to create a NotificationsUser.
   * @example
   * // Create one NotificationsUser
   * const NotificationsUser = await prisma.notificationsUser.create({
   *   data: {
   *     // ... data to create a NotificationsUser
   *   }
   * })
   * 
   */
  create<T extends NotificationsUserCreateArgs>(args: Prisma.SelectSubset<T, NotificationsUserCreateArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many NotificationsUsers.
   * @param {NotificationsUserCreateManyArgs} args - Arguments to create many NotificationsUsers.
   * @example
   * // Create many NotificationsUsers
   * const notificationsUser = await prisma.notificationsUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NotificationsUserCreateManyArgs>(args?: Prisma.SelectSubset<T, NotificationsUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many NotificationsUsers and returns the data saved in the database.
   * @param {NotificationsUserCreateManyAndReturnArgs} args - Arguments to create many NotificationsUsers.
   * @example
   * // Create many NotificationsUsers
   * const notificationsUser = await prisma.notificationsUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many NotificationsUsers and only return the `id`
   * const notificationsUserWithIdOnly = await prisma.notificationsUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends NotificationsUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, NotificationsUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a NotificationsUser.
   * @param {NotificationsUserDeleteArgs} args - Arguments to delete one NotificationsUser.
   * @example
   * // Delete one NotificationsUser
   * const NotificationsUser = await prisma.notificationsUser.delete({
   *   where: {
   *     // ... filter to delete one NotificationsUser
   *   }
   * })
   * 
   */
  delete<T extends NotificationsUserDeleteArgs>(args: Prisma.SelectSubset<T, NotificationsUserDeleteArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one NotificationsUser.
   * @param {NotificationsUserUpdateArgs} args - Arguments to update one NotificationsUser.
   * @example
   * // Update one NotificationsUser
   * const notificationsUser = await prisma.notificationsUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NotificationsUserUpdateArgs>(args: Prisma.SelectSubset<T, NotificationsUserUpdateArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more NotificationsUsers.
   * @param {NotificationsUserDeleteManyArgs} args - Arguments to filter NotificationsUsers to delete.
   * @example
   * // Delete a few NotificationsUsers
   * const { count } = await prisma.notificationsUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NotificationsUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, NotificationsUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationsUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NotificationsUsers
   * const notificationsUser = await prisma.notificationsUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NotificationsUserUpdateManyArgs>(args: Prisma.SelectSubset<T, NotificationsUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationsUsers and returns the data updated in the database.
   * @param {NotificationsUserUpdateManyAndReturnArgs} args - Arguments to update many NotificationsUsers.
   * @example
   * // Update many NotificationsUsers
   * const notificationsUser = await prisma.notificationsUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more NotificationsUsers and only return the `id`
   * const notificationsUserWithIdOnly = await prisma.notificationsUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends NotificationsUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, NotificationsUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one NotificationsUser.
   * @param {NotificationsUserUpsertArgs} args - Arguments to update or create a NotificationsUser.
   * @example
   * // Update or create a NotificationsUser
   * const notificationsUser = await prisma.notificationsUser.upsert({
   *   create: {
   *     // ... data to create a NotificationsUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NotificationsUser we want to update
   *   }
   * })
   */
  upsert<T extends NotificationsUserUpsertArgs>(args: Prisma.SelectSubset<T, NotificationsUserUpsertArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of NotificationsUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsUserCountArgs} args - Arguments to filter NotificationsUsers to count.
   * @example
   * // Count the number of NotificationsUsers
   * const count = await prisma.notificationsUser.count({
   *   where: {
   *     // ... the filter for the NotificationsUsers we want to count
   *   }
   * })
  **/
  count<T extends NotificationsUserCountArgs>(
    args?: Prisma.Subset<T, NotificationsUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NotificationsUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a NotificationsUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NotificationsUserAggregateArgs>(args: Prisma.Subset<T, NotificationsUserAggregateArgs>): Prisma.PrismaPromise<GetNotificationsUserAggregateType<T>>

  /**
   * Group by NotificationsUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NotificationsUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationsUserGroupByArgs['orderBy'] }
      : { orderBy?: NotificationsUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NotificationsUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the NotificationsUser model
 */
readonly fields: NotificationsUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NotificationsUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationsUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser<T extends Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser<T extends Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationsUser$NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the NotificationsUser model
 */
export interface NotificationsUserFieldRefs {
  readonly id: Prisma.FieldRef<"NotificationsUser", 'String'>
  readonly externalTenantId: Prisma.FieldRef<"NotificationsUser", 'String'>
  readonly externalUserId: Prisma.FieldRef<"NotificationsUser", 'String'>
  readonly createdAt: Prisma.FieldRef<"NotificationsUser", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"NotificationsUser", 'DateTime'>
}
    

// Custom InputTypes
/**
 * NotificationsUser findUnique
 */
export type NotificationsUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsUser to fetch.
   */
  where: Prisma.NotificationsUserWhereUniqueInput
}

/**
 * NotificationsUser findUniqueOrThrow
 */
export type NotificationsUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsUser to fetch.
   */
  where: Prisma.NotificationsUserWhereUniqueInput
}

/**
 * NotificationsUser findFirst
 */
export type NotificationsUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsUser to fetch.
   */
  where?: Prisma.NotificationsUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsUsers to fetch.
   */
  orderBy?: Prisma.NotificationsUserOrderByWithRelationInput | Prisma.NotificationsUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NotificationsUsers.
   */
  cursor?: Prisma.NotificationsUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NotificationsUsers.
   */
  distinct?: Prisma.NotificationsUserScalarFieldEnum | Prisma.NotificationsUserScalarFieldEnum[]
}

/**
 * NotificationsUser findFirstOrThrow
 */
export type NotificationsUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsUser to fetch.
   */
  where?: Prisma.NotificationsUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsUsers to fetch.
   */
  orderBy?: Prisma.NotificationsUserOrderByWithRelationInput | Prisma.NotificationsUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NotificationsUsers.
   */
  cursor?: Prisma.NotificationsUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NotificationsUsers.
   */
  distinct?: Prisma.NotificationsUserScalarFieldEnum | Prisma.NotificationsUserScalarFieldEnum[]
}

/**
 * NotificationsUser findMany
 */
export type NotificationsUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsUsers to fetch.
   */
  where?: Prisma.NotificationsUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsUsers to fetch.
   */
  orderBy?: Prisma.NotificationsUserOrderByWithRelationInput | Prisma.NotificationsUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing NotificationsUsers.
   */
  cursor?: Prisma.NotificationsUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsUsers.
   */
  skip?: number
  distinct?: Prisma.NotificationsUserScalarFieldEnum | Prisma.NotificationsUserScalarFieldEnum[]
}

/**
 * NotificationsUser create
 */
export type NotificationsUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * The data needed to create a NotificationsUser.
   */
  data: Prisma.XOR<Prisma.NotificationsUserCreateInput, Prisma.NotificationsUserUncheckedCreateInput>
}

/**
 * NotificationsUser createMany
 */
export type NotificationsUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many NotificationsUsers.
   */
  data: Prisma.NotificationsUserCreateManyInput | Prisma.NotificationsUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NotificationsUser createManyAndReturn
 */
export type NotificationsUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * The data used to create many NotificationsUsers.
   */
  data: Prisma.NotificationsUserCreateManyInput | Prisma.NotificationsUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NotificationsUser update
 */
export type NotificationsUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * The data needed to update a NotificationsUser.
   */
  data: Prisma.XOR<Prisma.NotificationsUserUpdateInput, Prisma.NotificationsUserUncheckedUpdateInput>
  /**
   * Choose, which NotificationsUser to update.
   */
  where: Prisma.NotificationsUserWhereUniqueInput
}

/**
 * NotificationsUser updateMany
 */
export type NotificationsUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update NotificationsUsers.
   */
  data: Prisma.XOR<Prisma.NotificationsUserUpdateManyMutationInput, Prisma.NotificationsUserUncheckedUpdateManyInput>
  /**
   * Filter which NotificationsUsers to update
   */
  where?: Prisma.NotificationsUserWhereInput
  /**
   * Limit how many NotificationsUsers to update.
   */
  limit?: number
}

/**
 * NotificationsUser updateManyAndReturn
 */
export type NotificationsUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * The data used to update NotificationsUsers.
   */
  data: Prisma.XOR<Prisma.NotificationsUserUpdateManyMutationInput, Prisma.NotificationsUserUncheckedUpdateManyInput>
  /**
   * Filter which NotificationsUsers to update
   */
  where?: Prisma.NotificationsUserWhereInput
  /**
   * Limit how many NotificationsUsers to update.
   */
  limit?: number
}

/**
 * NotificationsUser upsert
 */
export type NotificationsUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * The filter to search for the NotificationsUser to update in case it exists.
   */
  where: Prisma.NotificationsUserWhereUniqueInput
  /**
   * In case the NotificationsUser found by the `where` argument doesn't exist, create a new NotificationsUser with this data.
   */
  create: Prisma.XOR<Prisma.NotificationsUserCreateInput, Prisma.NotificationsUserUncheckedCreateInput>
  /**
   * In case the NotificationsUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NotificationsUserUpdateInput, Prisma.NotificationsUserUncheckedUpdateInput>
}

/**
 * NotificationsUser delete
 */
export type NotificationsUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  /**
   * Filter which NotificationsUser to delete.
   */
  where: Prisma.NotificationsUserWhereUniqueInput
}

/**
 * NotificationsUser deleteMany
 */
export type NotificationsUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NotificationsUsers to delete
   */
  where?: Prisma.NotificationsUserWhereInput
  /**
   * Limit how many NotificationsUsers to delete.
   */
  limit?: number
}

/**
 * NotificationsUser.NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUser
 */
export type NotificationsUser$NotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  where?: Prisma.NotificationsEventWhereInput
  orderBy?: Prisma.NotificationsEventOrderByWithRelationInput | Prisma.NotificationsEventOrderByWithRelationInput[]
  cursor?: Prisma.NotificationsEventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationsEventScalarFieldEnum | Prisma.NotificationsEventScalarFieldEnum[]
}

/**
 * NotificationsUser.NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUser
 */
export type NotificationsUser$NotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  where?: Prisma.NotificationsEventWhereInput
  orderBy?: Prisma.NotificationsEventOrderByWithRelationInput | Prisma.NotificationsEventOrderByWithRelationInput[]
  cursor?: Prisma.NotificationsEventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationsEventScalarFieldEnum | Prisma.NotificationsEventScalarFieldEnum[]
}

/**
 * NotificationsUser without action
 */
export type NotificationsUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
}
