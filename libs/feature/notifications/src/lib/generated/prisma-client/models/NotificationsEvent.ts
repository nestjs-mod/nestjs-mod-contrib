
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `NotificationsEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model NotificationsEvent
 * 
 */
export type NotificationsEventModel = runtime.Types.Result.DefaultSelection<Prisma.$NotificationsEventPayload>

export type AggregateNotificationsEvent = {
  _count: NotificationsEventCountAggregateOutputType | null
  _avg: NotificationsEventAvgAggregateOutputType | null
  _sum: NotificationsEventSumAggregateOutputType | null
  _min: NotificationsEventMinAggregateOutputType | null
  _max: NotificationsEventMaxAggregateOutputType | null
}

export type NotificationsEventAvgAggregateOutputType = {
  attempt: number | null
}

export type NotificationsEventSumAggregateOutputType = {
  attempt: number | null
}

export type NotificationsEventMinAggregateOutputType = {
  id: string | null
  type: string | null
  operationName: string | null
  subject: string | null
  html: string | null
  text: string | null
  attempt: number | null
  used: boolean | null
  senderUserId: string | null
  recipientGroupId: string | null
  recipientUserId: string | null
  externalTenantId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationsEventMaxAggregateOutputType = {
  id: string | null
  type: string | null
  operationName: string | null
  subject: string | null
  html: string | null
  text: string | null
  attempt: number | null
  used: boolean | null
  senderUserId: string | null
  recipientGroupId: string | null
  recipientUserId: string | null
  externalTenantId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationsEventCountAggregateOutputType = {
  id: number
  type: number
  operationName: number
  subject: number
  html: number
  text: number
  attempt: number
  used: number
  error: number
  senderUserId: number
  senderData: number
  recipientGroupId: number
  recipientUserId: number
  recipientData: number
  externalTenantId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type NotificationsEventAvgAggregateInputType = {
  attempt?: true
}

export type NotificationsEventSumAggregateInputType = {
  attempt?: true
}

export type NotificationsEventMinAggregateInputType = {
  id?: true
  type?: true
  operationName?: true
  subject?: true
  html?: true
  text?: true
  attempt?: true
  used?: true
  senderUserId?: true
  recipientGroupId?: true
  recipientUserId?: true
  externalTenantId?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationsEventMaxAggregateInputType = {
  id?: true
  type?: true
  operationName?: true
  subject?: true
  html?: true
  text?: true
  attempt?: true
  used?: true
  senderUserId?: true
  recipientGroupId?: true
  recipientUserId?: true
  externalTenantId?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationsEventCountAggregateInputType = {
  id?: true
  type?: true
  operationName?: true
  subject?: true
  html?: true
  text?: true
  attempt?: true
  used?: true
  error?: true
  senderUserId?: true
  senderData?: true
  recipientGroupId?: true
  recipientUserId?: true
  recipientData?: true
  externalTenantId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type NotificationsEventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NotificationsEvent to aggregate.
   */
  where?: Prisma.NotificationsEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsEvents to fetch.
   */
  orderBy?: Prisma.NotificationsEventOrderByWithRelationInput | Prisma.NotificationsEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NotificationsEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned NotificationsEvents
  **/
  _count?: true | NotificationsEventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: NotificationsEventAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: NotificationsEventSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NotificationsEventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NotificationsEventMaxAggregateInputType
}

export type GetNotificationsEventAggregateType<T extends NotificationsEventAggregateArgs> = {
      [P in keyof T & keyof AggregateNotificationsEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotificationsEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateNotificationsEvent[P]>
}




export type NotificationsEventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationsEventWhereInput
  orderBy?: Prisma.NotificationsEventOrderByWithAggregationInput | Prisma.NotificationsEventOrderByWithAggregationInput[]
  by: Prisma.NotificationsEventScalarFieldEnum[] | Prisma.NotificationsEventScalarFieldEnum
  having?: Prisma.NotificationsEventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NotificationsEventCountAggregateInputType | true
  _avg?: NotificationsEventAvgAggregateInputType
  _sum?: NotificationsEventSumAggregateInputType
  _min?: NotificationsEventMinAggregateInputType
  _max?: NotificationsEventMaxAggregateInputType
}

export type NotificationsEventGroupByOutputType = {
  id: string
  type: string
  operationName: string
  subject: string
  html: string
  text: string | null
  attempt: number
  used: boolean
  error: runtime.JsonValue | null
  senderUserId: string | null
  senderData: runtime.JsonValue | null
  recipientGroupId: string
  recipientUserId: string
  recipientData: runtime.JsonValue | null
  externalTenantId: string
  createdAt: Date
  updatedAt: Date
  _count: NotificationsEventCountAggregateOutputType | null
  _avg: NotificationsEventAvgAggregateOutputType | null
  _sum: NotificationsEventSumAggregateOutputType | null
  _min: NotificationsEventMinAggregateOutputType | null
  _max: NotificationsEventMaxAggregateOutputType | null
}

type GetNotificationsEventGroupByPayload<T extends NotificationsEventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotificationsEventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NotificationsEventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotificationsEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotificationsEventGroupByOutputType[P]>
      }
    >
  > 



export type NotificationsEventWhereInput = {
  AND?: Prisma.NotificationsEventWhereInput | Prisma.NotificationsEventWhereInput[]
  OR?: Prisma.NotificationsEventWhereInput[]
  NOT?: Prisma.NotificationsEventWhereInput | Prisma.NotificationsEventWhereInput[]
  id?: Prisma.UuidFilter<"NotificationsEvent"> | string
  type?: Prisma.StringFilter<"NotificationsEvent"> | string
  operationName?: Prisma.StringFilter<"NotificationsEvent"> | string
  subject?: Prisma.StringFilter<"NotificationsEvent"> | string
  html?: Prisma.StringFilter<"NotificationsEvent"> | string
  text?: Prisma.StringNullableFilter<"NotificationsEvent"> | string | null
  attempt?: Prisma.IntFilter<"NotificationsEvent"> | number
  used?: Prisma.BoolFilter<"NotificationsEvent"> | boolean
  error?: Prisma.JsonNullableFilter<"NotificationsEvent">
  senderUserId?: Prisma.UuidNullableFilter<"NotificationsEvent"> | string | null
  senderData?: Prisma.JsonNullableFilter<"NotificationsEvent">
  recipientGroupId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  recipientUserId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  recipientData?: Prisma.JsonNullableFilter<"NotificationsEvent">
  externalTenantId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  createdAt?: Prisma.DateTimeFilter<"NotificationsEvent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationsEvent"> | Date | string
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.XOR<Prisma.NotificationsUserScalarRelationFilter, Prisma.NotificationsUserWhereInput>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.XOR<Prisma.NotificationsUserNullableScalarRelationFilter, Prisma.NotificationsUserWhereInput> | null
}

export type NotificationsEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  operationName?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  html?: Prisma.SortOrder
  text?: Prisma.SortOrderInput | Prisma.SortOrder
  attempt?: Prisma.SortOrder
  used?: Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  senderUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  senderData?: Prisma.SortOrderInput | Prisma.SortOrder
  recipientGroupId?: Prisma.SortOrder
  recipientUserId?: Prisma.SortOrder
  recipientData?: Prisma.SortOrderInput | Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsUserOrderByWithRelationInput
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsUserOrderByWithRelationInput
}

export type NotificationsEventWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  senderUserId_recipientUserId_operationName_type_html_subject_externalTenantId?: Prisma.NotificationsEventSenderUserIdRecipientUserIdOperationNameTypeHtmlSubjectExternalTenantIdCompoundUniqueInput
  AND?: Prisma.NotificationsEventWhereInput | Prisma.NotificationsEventWhereInput[]
  OR?: Prisma.NotificationsEventWhereInput[]
  NOT?: Prisma.NotificationsEventWhereInput | Prisma.NotificationsEventWhereInput[]
  type?: Prisma.StringFilter<"NotificationsEvent"> | string
  operationName?: Prisma.StringFilter<"NotificationsEvent"> | string
  subject?: Prisma.StringFilter<"NotificationsEvent"> | string
  html?: Prisma.StringFilter<"NotificationsEvent"> | string
  text?: Prisma.StringNullableFilter<"NotificationsEvent"> | string | null
  attempt?: Prisma.IntFilter<"NotificationsEvent"> | number
  used?: Prisma.BoolFilter<"NotificationsEvent"> | boolean
  error?: Prisma.JsonNullableFilter<"NotificationsEvent">
  senderUserId?: Prisma.UuidNullableFilter<"NotificationsEvent"> | string | null
  senderData?: Prisma.JsonNullableFilter<"NotificationsEvent">
  recipientGroupId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  recipientUserId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  recipientData?: Prisma.JsonNullableFilter<"NotificationsEvent">
  externalTenantId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  createdAt?: Prisma.DateTimeFilter<"NotificationsEvent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationsEvent"> | Date | string
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.XOR<Prisma.NotificationsUserScalarRelationFilter, Prisma.NotificationsUserWhereInput>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.XOR<Prisma.NotificationsUserNullableScalarRelationFilter, Prisma.NotificationsUserWhereInput> | null
}, "id" | "senderUserId_recipientUserId_operationName_type_html_subject_externalTenantId">

export type NotificationsEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  operationName?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  html?: Prisma.SortOrder
  text?: Prisma.SortOrderInput | Prisma.SortOrder
  attempt?: Prisma.SortOrder
  used?: Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  senderUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  senderData?: Prisma.SortOrderInput | Prisma.SortOrder
  recipientGroupId?: Prisma.SortOrder
  recipientUserId?: Prisma.SortOrder
  recipientData?: Prisma.SortOrderInput | Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.NotificationsEventCountOrderByAggregateInput
  _avg?: Prisma.NotificationsEventAvgOrderByAggregateInput
  _max?: Prisma.NotificationsEventMaxOrderByAggregateInput
  _min?: Prisma.NotificationsEventMinOrderByAggregateInput
  _sum?: Prisma.NotificationsEventSumOrderByAggregateInput
}

export type NotificationsEventScalarWhereWithAggregatesInput = {
  AND?: Prisma.NotificationsEventScalarWhereWithAggregatesInput | Prisma.NotificationsEventScalarWhereWithAggregatesInput[]
  OR?: Prisma.NotificationsEventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NotificationsEventScalarWhereWithAggregatesInput | Prisma.NotificationsEventScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"NotificationsEvent"> | string
  type?: Prisma.StringWithAggregatesFilter<"NotificationsEvent"> | string
  operationName?: Prisma.StringWithAggregatesFilter<"NotificationsEvent"> | string
  subject?: Prisma.StringWithAggregatesFilter<"NotificationsEvent"> | string
  html?: Prisma.StringWithAggregatesFilter<"NotificationsEvent"> | string
  text?: Prisma.StringNullableWithAggregatesFilter<"NotificationsEvent"> | string | null
  attempt?: Prisma.IntWithAggregatesFilter<"NotificationsEvent"> | number
  used?: Prisma.BoolWithAggregatesFilter<"NotificationsEvent"> | boolean
  error?: Prisma.JsonNullableWithAggregatesFilter<"NotificationsEvent">
  senderUserId?: Prisma.UuidNullableWithAggregatesFilter<"NotificationsEvent"> | string | null
  senderData?: Prisma.JsonNullableWithAggregatesFilter<"NotificationsEvent">
  recipientGroupId?: Prisma.UuidWithAggregatesFilter<"NotificationsEvent"> | string
  recipientUserId?: Prisma.UuidWithAggregatesFilter<"NotificationsEvent"> | string
  recipientData?: Prisma.JsonNullableWithAggregatesFilter<"NotificationsEvent">
  externalTenantId?: Prisma.UuidWithAggregatesFilter<"NotificationsEvent"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"NotificationsEvent"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"NotificationsEvent"> | Date | string
}

export type NotificationsEventCreateInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser: Prisma.NotificationsUserCreateNestedOneWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsUserCreateNestedOneWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput
}

export type NotificationsEventUncheckedCreateInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientUserId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationsEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsUserUpdateOneRequiredWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsUserUpdateOneWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserNestedInput
}

export type NotificationsEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientUserId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsEventCreateManyInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientUserId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationsEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientUserId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsEventListRelationFilter = {
  every?: Prisma.NotificationsEventWhereInput
  some?: Prisma.NotificationsEventWhereInput
  none?: Prisma.NotificationsEventWhereInput
}

export type NotificationsEventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NotificationsEventSenderUserIdRecipientUserIdOperationNameTypeHtmlSubjectExternalTenantIdCompoundUniqueInput = {
  senderUserId: string
  recipientUserId: string
  operationName: string
  type: string
  html: string
  subject: string
  externalTenantId: string
}

export type NotificationsEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  operationName?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  html?: Prisma.SortOrder
  text?: Prisma.SortOrder
  attempt?: Prisma.SortOrder
  used?: Prisma.SortOrder
  error?: Prisma.SortOrder
  senderUserId?: Prisma.SortOrder
  senderData?: Prisma.SortOrder
  recipientGroupId?: Prisma.SortOrder
  recipientUserId?: Prisma.SortOrder
  recipientData?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationsEventAvgOrderByAggregateInput = {
  attempt?: Prisma.SortOrder
}

export type NotificationsEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  operationName?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  html?: Prisma.SortOrder
  text?: Prisma.SortOrder
  attempt?: Prisma.SortOrder
  used?: Prisma.SortOrder
  senderUserId?: Prisma.SortOrder
  recipientGroupId?: Prisma.SortOrder
  recipientUserId?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationsEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  operationName?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  html?: Prisma.SortOrder
  text?: Prisma.SortOrder
  attempt?: Prisma.SortOrder
  used?: Prisma.SortOrder
  senderUserId?: Prisma.SortOrder
  recipientGroupId?: Prisma.SortOrder
  recipientUserId?: Prisma.SortOrder
  externalTenantId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationsEventSumOrderByAggregateInput = {
  attempt?: Prisma.SortOrder
}

export type NotificationsEventCreateNestedManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInputEnvelope
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
}

export type NotificationsEventCreateNestedManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInputEnvelope
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
}

export type NotificationsEventUncheckedCreateNestedManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInputEnvelope
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
}

export type NotificationsEventUncheckedCreateNestedManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInputEnvelope
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
}

export type NotificationsEventUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  upsert?: Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInputEnvelope
  set?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  disconnect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  delete?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  update?: Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  updateMany?: Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  deleteMany?: Prisma.NotificationsEventScalarWhereInput | Prisma.NotificationsEventScalarWhereInput[]
}

export type NotificationsEventUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  upsert?: Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInputEnvelope
  set?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  disconnect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  delete?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  update?: Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  updateMany?: Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  deleteMany?: Prisma.NotificationsEventScalarWhereInput | Prisma.NotificationsEventScalarWhereInput[]
}

export type NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  upsert?: Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInputEnvelope
  set?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  disconnect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  delete?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  update?: Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  updateMany?: Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  deleteMany?: Prisma.NotificationsEventScalarWhereInput | Prisma.NotificationsEventScalarWhereInput[]
}

export type NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput> | Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[] | Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  connectOrCreate?: Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  upsert?: Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  createMany?: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInputEnvelope
  set?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  disconnect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  delete?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  connect?: Prisma.NotificationsEventWhereUniqueInput | Prisma.NotificationsEventWhereUniqueInput[]
  update?: Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  updateMany?: Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  deleteMany?: Prisma.NotificationsEventScalarWhereInput | Prisma.NotificationsEventScalarWhereInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsUserCreateNestedOneWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserInput
}

export type NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput>
}

export type NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInputEnvelope = {
  data: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput[]
  skipDuplicates?: boolean
}

export type NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser: Prisma.NotificationsUserCreateNestedOneWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserInput
}

export type NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientUserId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationsEventCreateOrConnectWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput>
}

export type NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInputEnvelope = {
  data: Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput | Prisma.NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput[]
  skipDuplicates?: boolean
}

export type NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventWhereUniqueInput
  update: Prisma.XOR<Prisma.NotificationsEventUpdateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedUpdateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput>
  create: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput>
}

export type NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventWhereUniqueInput
  data: Prisma.XOR<Prisma.NotificationsEventUpdateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedUpdateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput>
}

export type NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventScalarWhereInput
  data: Prisma.XOR<Prisma.NotificationsEventUpdateManyMutationInput, Prisma.NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput>
}

export type NotificationsEventScalarWhereInput = {
  AND?: Prisma.NotificationsEventScalarWhereInput | Prisma.NotificationsEventScalarWhereInput[]
  OR?: Prisma.NotificationsEventScalarWhereInput[]
  NOT?: Prisma.NotificationsEventScalarWhereInput | Prisma.NotificationsEventScalarWhereInput[]
  id?: Prisma.UuidFilter<"NotificationsEvent"> | string
  type?: Prisma.StringFilter<"NotificationsEvent"> | string
  operationName?: Prisma.StringFilter<"NotificationsEvent"> | string
  subject?: Prisma.StringFilter<"NotificationsEvent"> | string
  html?: Prisma.StringFilter<"NotificationsEvent"> | string
  text?: Prisma.StringNullableFilter<"NotificationsEvent"> | string | null
  attempt?: Prisma.IntFilter<"NotificationsEvent"> | number
  used?: Prisma.BoolFilter<"NotificationsEvent"> | boolean
  error?: Prisma.JsonNullableFilter<"NotificationsEvent">
  senderUserId?: Prisma.UuidNullableFilter<"NotificationsEvent"> | string | null
  senderData?: Prisma.JsonNullableFilter<"NotificationsEvent">
  recipientGroupId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  recipientUserId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  recipientData?: Prisma.JsonNullableFilter<"NotificationsEvent">
  externalTenantId?: Prisma.UuidFilter<"NotificationsEvent"> | string
  createdAt?: Prisma.DateTimeFilter<"NotificationsEvent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationsEvent"> | Date | string
}

export type NotificationsEventUpsertWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventWhereUniqueInput
  update: Prisma.XOR<Prisma.NotificationsEventUpdateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedUpdateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput>
  create: Prisma.XOR<Prisma.NotificationsEventCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedCreateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput>
}

export type NotificationsEventUpdateWithWhereUniqueWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventWhereUniqueInput
  data: Prisma.XOR<Prisma.NotificationsEventUpdateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput, Prisma.NotificationsEventUncheckedUpdateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput>
}

export type NotificationsEventUpdateManyWithWhereWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  where: Prisma.NotificationsEventScalarWhereInput
  data: Prisma.XOR<Prisma.NotificationsEventUpdateManyMutationInput, Prisma.NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput>
}

export type NotificationsEventCreateManyNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationsEventCreateManyNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: string
  type: string
  operationName: string
  subject: string
  html: string
  text?: string | null
  attempt: number
  used: boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId: string
  recipientUserId: string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationsEventUpdateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: Prisma.NotificationsUserUpdateOneWithoutNotificationsEvent_NotificationsEvent_senderUserIdToNotificationsUserNestedInput
}

export type NotificationsEventUncheckedUpdateWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsEventUpdateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: Prisma.NotificationsUserUpdateOneRequiredWithoutNotificationsEvent_NotificationsEvent_recipientUserIdToNotificationsUserNestedInput
}

export type NotificationsEventUncheckedUpdateWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientUserId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsEventUncheckedUpdateManyWithoutNotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  operationName?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  html?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attempt?: Prisma.IntFieldUpdateOperationsInput | number
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  senderData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  recipientGroupId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientUserId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  externalTenantId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type NotificationsEventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  operationName?: boolean
  subject?: boolean
  html?: boolean
  text?: boolean
  attempt?: boolean
  used?: boolean
  error?: boolean
  senderUserId?: boolean
  senderData?: boolean
  recipientGroupId?: boolean
  recipientUserId?: boolean
  recipientData?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUserDefaultArgs<ExtArgs>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
}, ExtArgs["result"]["notificationsEvent"]>

export type NotificationsEventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  operationName?: boolean
  subject?: boolean
  html?: boolean
  text?: boolean
  attempt?: boolean
  used?: boolean
  error?: boolean
  senderUserId?: boolean
  senderData?: boolean
  recipientGroupId?: boolean
  recipientUserId?: boolean
  recipientData?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUserDefaultArgs<ExtArgs>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
}, ExtArgs["result"]["notificationsEvent"]>

export type NotificationsEventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  operationName?: boolean
  subject?: boolean
  html?: boolean
  text?: boolean
  attempt?: boolean
  used?: boolean
  error?: boolean
  senderUserId?: boolean
  senderData?: boolean
  recipientGroupId?: boolean
  recipientUserId?: boolean
  recipientData?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUserDefaultArgs<ExtArgs>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
}, ExtArgs["result"]["notificationsEvent"]>

export type NotificationsEventSelectScalar = {
  id?: boolean
  type?: boolean
  operationName?: boolean
  subject?: boolean
  html?: boolean
  text?: boolean
  attempt?: boolean
  used?: boolean
  error?: boolean
  senderUserId?: boolean
  senderData?: boolean
  recipientGroupId?: boolean
  recipientUserId?: boolean
  recipientData?: boolean
  externalTenantId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type NotificationsEventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "operationName" | "subject" | "html" | "text" | "attempt" | "used" | "error" | "senderUserId" | "senderData" | "recipientGroupId" | "recipientUserId" | "recipientData" | "externalTenantId" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationsEvent"]>
export type NotificationsEventInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUserDefaultArgs<ExtArgs>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
}
export type NotificationsEventIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUserDefaultArgs<ExtArgs>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
}
export type NotificationsEventIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser?: boolean | Prisma.NotificationsUserDefaultArgs<ExtArgs>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser?: boolean | Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>
}

export type $NotificationsEventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "NotificationsEvent"
  objects: {
    NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser: Prisma.$NotificationsUserPayload<ExtArgs>
    NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser: Prisma.$NotificationsUserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * @DtoCreateHidden
     */
    id: string
    type: string
    operationName: string
    subject: string
    html: string
    text: string | null
    attempt: number
    used: boolean
    error: runtime.JsonValue | null
    senderUserId: string | null
    senderData: runtime.JsonValue | null
    recipientGroupId: string
    recipientUserId: string
    recipientData: runtime.JsonValue | null
    externalTenantId: string
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    createdAt: Date
    /**
     * @DtoCreateHidden
     * @DtoUpdateHidden
     */
    updatedAt: Date
  }, ExtArgs["result"]["notificationsEvent"]>
  composites: {}
}

export type NotificationsEventGetPayload<S extends boolean | null | undefined | NotificationsEventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload, S>

export type NotificationsEventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NotificationsEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NotificationsEventCountAggregateInputType | true
  }

export interface NotificationsEventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationsEvent'], meta: { name: 'NotificationsEvent' } }
  /**
   * Find zero or one NotificationsEvent that matches the filter.
   * @param {NotificationsEventFindUniqueArgs} args - Arguments to find a NotificationsEvent
   * @example
   * // Get one NotificationsEvent
   * const notificationsEvent = await prisma.notificationsEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationsEventFindUniqueArgs>(args: Prisma.SelectSubset<T, NotificationsEventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one NotificationsEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationsEventFindUniqueOrThrowArgs} args - Arguments to find a NotificationsEvent
   * @example
   * // Get one NotificationsEvent
   * const notificationsEvent = await prisma.notificationsEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationsEventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NotificationsEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NotificationsEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsEventFindFirstArgs} args - Arguments to find a NotificationsEvent
   * @example
   * // Get one NotificationsEvent
   * const notificationsEvent = await prisma.notificationsEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationsEventFindFirstArgs>(args?: Prisma.SelectSubset<T, NotificationsEventFindFirstArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NotificationsEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsEventFindFirstOrThrowArgs} args - Arguments to find a NotificationsEvent
   * @example
   * // Get one NotificationsEvent
   * const notificationsEvent = await prisma.notificationsEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationsEventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NotificationsEventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more NotificationsEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NotificationsEvents
   * const notificationsEvents = await prisma.notificationsEvent.findMany()
   * 
   * // Get first 10 NotificationsEvents
   * const notificationsEvents = await prisma.notificationsEvent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const notificationsEventWithIdOnly = await prisma.notificationsEvent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NotificationsEventFindManyArgs>(args?: Prisma.SelectSubset<T, NotificationsEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a NotificationsEvent.
   * @param {NotificationsEventCreateArgs} args - Arguments to create a NotificationsEvent.
   * @example
   * // Create one NotificationsEvent
   * const NotificationsEvent = await prisma.notificationsEvent.create({
   *   data: {
   *     // ... data to create a NotificationsEvent
   *   }
   * })
   * 
   */
  create<T extends NotificationsEventCreateArgs>(args: Prisma.SelectSubset<T, NotificationsEventCreateArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many NotificationsEvents.
   * @param {NotificationsEventCreateManyArgs} args - Arguments to create many NotificationsEvents.
   * @example
   * // Create many NotificationsEvents
   * const notificationsEvent = await prisma.notificationsEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NotificationsEventCreateManyArgs>(args?: Prisma.SelectSubset<T, NotificationsEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many NotificationsEvents and returns the data saved in the database.
   * @param {NotificationsEventCreateManyAndReturnArgs} args - Arguments to create many NotificationsEvents.
   * @example
   * // Create many NotificationsEvents
   * const notificationsEvent = await prisma.notificationsEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many NotificationsEvents and only return the `id`
   * const notificationsEventWithIdOnly = await prisma.notificationsEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends NotificationsEventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, NotificationsEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a NotificationsEvent.
   * @param {NotificationsEventDeleteArgs} args - Arguments to delete one NotificationsEvent.
   * @example
   * // Delete one NotificationsEvent
   * const NotificationsEvent = await prisma.notificationsEvent.delete({
   *   where: {
   *     // ... filter to delete one NotificationsEvent
   *   }
   * })
   * 
   */
  delete<T extends NotificationsEventDeleteArgs>(args: Prisma.SelectSubset<T, NotificationsEventDeleteArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one NotificationsEvent.
   * @param {NotificationsEventUpdateArgs} args - Arguments to update one NotificationsEvent.
   * @example
   * // Update one NotificationsEvent
   * const notificationsEvent = await prisma.notificationsEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NotificationsEventUpdateArgs>(args: Prisma.SelectSubset<T, NotificationsEventUpdateArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more NotificationsEvents.
   * @param {NotificationsEventDeleteManyArgs} args - Arguments to filter NotificationsEvents to delete.
   * @example
   * // Delete a few NotificationsEvents
   * const { count } = await prisma.notificationsEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NotificationsEventDeleteManyArgs>(args?: Prisma.SelectSubset<T, NotificationsEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationsEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NotificationsEvents
   * const notificationsEvent = await prisma.notificationsEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NotificationsEventUpdateManyArgs>(args: Prisma.SelectSubset<T, NotificationsEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationsEvents and returns the data updated in the database.
   * @param {NotificationsEventUpdateManyAndReturnArgs} args - Arguments to update many NotificationsEvents.
   * @example
   * // Update many NotificationsEvents
   * const notificationsEvent = await prisma.notificationsEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more NotificationsEvents and only return the `id`
   * const notificationsEventWithIdOnly = await prisma.notificationsEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends NotificationsEventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, NotificationsEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one NotificationsEvent.
   * @param {NotificationsEventUpsertArgs} args - Arguments to update or create a NotificationsEvent.
   * @example
   * // Update or create a NotificationsEvent
   * const notificationsEvent = await prisma.notificationsEvent.upsert({
   *   create: {
   *     // ... data to create a NotificationsEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NotificationsEvent we want to update
   *   }
   * })
   */
  upsert<T extends NotificationsEventUpsertArgs>(args: Prisma.SelectSubset<T, NotificationsEventUpsertArgs<ExtArgs>>): Prisma.Prisma__NotificationsEventClient<runtime.Types.Result.GetResult<Prisma.$NotificationsEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of NotificationsEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsEventCountArgs} args - Arguments to filter NotificationsEvents to count.
   * @example
   * // Count the number of NotificationsEvents
   * const count = await prisma.notificationsEvent.count({
   *   where: {
   *     // ... the filter for the NotificationsEvents we want to count
   *   }
   * })
  **/
  count<T extends NotificationsEventCountArgs>(
    args?: Prisma.Subset<T, NotificationsEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NotificationsEventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a NotificationsEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NotificationsEventAggregateArgs>(args: Prisma.Subset<T, NotificationsEventAggregateArgs>): Prisma.PrismaPromise<GetNotificationsEventAggregateType<T>>

  /**
   * Group by NotificationsEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NotificationsEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationsEventGroupByArgs['orderBy'] }
      : { orderBy?: NotificationsEventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NotificationsEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the NotificationsEvent model
 */
readonly fields: NotificationsEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NotificationsEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationsEventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  NotificationsUser_NotificationsEvent_recipientUserIdToNotificationsUser<T extends Prisma.NotificationsUserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationsUserDefaultArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser<T extends Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs>>): Prisma.Prisma__NotificationsUserClient<runtime.Types.Result.GetResult<Prisma.$NotificationsUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the NotificationsEvent model
 */
export interface NotificationsEventFieldRefs {
  readonly id: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly type: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly operationName: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly subject: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly html: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly text: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly attempt: Prisma.FieldRef<"NotificationsEvent", 'Int'>
  readonly used: Prisma.FieldRef<"NotificationsEvent", 'Boolean'>
  readonly error: Prisma.FieldRef<"NotificationsEvent", 'Json'>
  readonly senderUserId: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly senderData: Prisma.FieldRef<"NotificationsEvent", 'Json'>
  readonly recipientGroupId: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly recipientUserId: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly recipientData: Prisma.FieldRef<"NotificationsEvent", 'Json'>
  readonly externalTenantId: Prisma.FieldRef<"NotificationsEvent", 'String'>
  readonly createdAt: Prisma.FieldRef<"NotificationsEvent", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"NotificationsEvent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * NotificationsEvent findUnique
 */
export type NotificationsEventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsEvent to fetch.
   */
  where: Prisma.NotificationsEventWhereUniqueInput
}

/**
 * NotificationsEvent findUniqueOrThrow
 */
export type NotificationsEventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsEvent to fetch.
   */
  where: Prisma.NotificationsEventWhereUniqueInput
}

/**
 * NotificationsEvent findFirst
 */
export type NotificationsEventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsEvent to fetch.
   */
  where?: Prisma.NotificationsEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsEvents to fetch.
   */
  orderBy?: Prisma.NotificationsEventOrderByWithRelationInput | Prisma.NotificationsEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NotificationsEvents.
   */
  cursor?: Prisma.NotificationsEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NotificationsEvents.
   */
  distinct?: Prisma.NotificationsEventScalarFieldEnum | Prisma.NotificationsEventScalarFieldEnum[]
}

/**
 * NotificationsEvent findFirstOrThrow
 */
export type NotificationsEventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsEvent to fetch.
   */
  where?: Prisma.NotificationsEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsEvents to fetch.
   */
  orderBy?: Prisma.NotificationsEventOrderByWithRelationInput | Prisma.NotificationsEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NotificationsEvents.
   */
  cursor?: Prisma.NotificationsEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NotificationsEvents.
   */
  distinct?: Prisma.NotificationsEventScalarFieldEnum | Prisma.NotificationsEventScalarFieldEnum[]
}

/**
 * NotificationsEvent findMany
 */
export type NotificationsEventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * Filter, which NotificationsEvents to fetch.
   */
  where?: Prisma.NotificationsEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationsEvents to fetch.
   */
  orderBy?: Prisma.NotificationsEventOrderByWithRelationInput | Prisma.NotificationsEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing NotificationsEvents.
   */
  cursor?: Prisma.NotificationsEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationsEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationsEvents.
   */
  skip?: number
  distinct?: Prisma.NotificationsEventScalarFieldEnum | Prisma.NotificationsEventScalarFieldEnum[]
}

/**
 * NotificationsEvent create
 */
export type NotificationsEventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * The data needed to create a NotificationsEvent.
   */
  data: Prisma.XOR<Prisma.NotificationsEventCreateInput, Prisma.NotificationsEventUncheckedCreateInput>
}

/**
 * NotificationsEvent createMany
 */
export type NotificationsEventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many NotificationsEvents.
   */
  data: Prisma.NotificationsEventCreateManyInput | Prisma.NotificationsEventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NotificationsEvent createManyAndReturn
 */
export type NotificationsEventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * The data used to create many NotificationsEvents.
   */
  data: Prisma.NotificationsEventCreateManyInput | Prisma.NotificationsEventCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * NotificationsEvent update
 */
export type NotificationsEventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * The data needed to update a NotificationsEvent.
   */
  data: Prisma.XOR<Prisma.NotificationsEventUpdateInput, Prisma.NotificationsEventUncheckedUpdateInput>
  /**
   * Choose, which NotificationsEvent to update.
   */
  where: Prisma.NotificationsEventWhereUniqueInput
}

/**
 * NotificationsEvent updateMany
 */
export type NotificationsEventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update NotificationsEvents.
   */
  data: Prisma.XOR<Prisma.NotificationsEventUpdateManyMutationInput, Prisma.NotificationsEventUncheckedUpdateManyInput>
  /**
   * Filter which NotificationsEvents to update
   */
  where?: Prisma.NotificationsEventWhereInput
  /**
   * Limit how many NotificationsEvents to update.
   */
  limit?: number
}

/**
 * NotificationsEvent updateManyAndReturn
 */
export type NotificationsEventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * The data used to update NotificationsEvents.
   */
  data: Prisma.XOR<Prisma.NotificationsEventUpdateManyMutationInput, Prisma.NotificationsEventUncheckedUpdateManyInput>
  /**
   * Filter which NotificationsEvents to update
   */
  where?: Prisma.NotificationsEventWhereInput
  /**
   * Limit how many NotificationsEvents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * NotificationsEvent upsert
 */
export type NotificationsEventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * The filter to search for the NotificationsEvent to update in case it exists.
   */
  where: Prisma.NotificationsEventWhereUniqueInput
  /**
   * In case the NotificationsEvent found by the `where` argument doesn't exist, create a new NotificationsEvent with this data.
   */
  create: Prisma.XOR<Prisma.NotificationsEventCreateInput, Prisma.NotificationsEventUncheckedCreateInput>
  /**
   * In case the NotificationsEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NotificationsEventUpdateInput, Prisma.NotificationsEventUncheckedUpdateInput>
}

/**
 * NotificationsEvent delete
 */
export type NotificationsEventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
  /**
   * Filter which NotificationsEvent to delete.
   */
  where: Prisma.NotificationsEventWhereUniqueInput
}

/**
 * NotificationsEvent deleteMany
 */
export type NotificationsEventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NotificationsEvents to delete
   */
  where?: Prisma.NotificationsEventWhereInput
  /**
   * Limit how many NotificationsEvents to delete.
   */
  limit?: number
}

/**
 * NotificationsEvent.NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUser
 */
export type NotificationsEvent$NotificationsUser_NotificationsEvent_senderUserIdToNotificationsUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsUser
   */
  select?: Prisma.NotificationsUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsUser
   */
  omit?: Prisma.NotificationsUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsUserInclude<ExtArgs> | null
  where?: Prisma.NotificationsUserWhereInput
}

/**
 * NotificationsEvent without action
 */
export type NotificationsEventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationsEvent
   */
  select?: Prisma.NotificationsEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationsEvent
   */
  omit?: Prisma.NotificationsEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsEventInclude<ExtArgs> | null
}
